[{"path":[]},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement gandahostanmah@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://stangandaho.github.io/ct/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct/. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq/. Translations available https://www.contributor-covenant.org/translations/.","code":""},{"path":"https://stangandaho.github.io/ct/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 maimer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stangandaho.github.io/ct/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stanislas Mahussi Gandaho. Author, maintainer. R Consortium. Funder.","code":""},{"path":"https://stangandaho.github.io/ct/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gandaho S (2025). ct: Camera Trap Data Management Analysis. R package version 0.2.0, https://stangandaho.github.io/ct/.","code":"@Manual{,   title = {ct: Camera Trap Data Management and Analysis},   author = {Stanislas Mahussi Gandaho},   year = {2025},   note = {R package version 0.2.0},   url = {https://stangandaho.github.io/ct/}, }"},{"path":[]},{"path":"https://stangandaho.github.io/ct/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Camera Trap Data Management and Analysis","text":"Camera traps essential tool wildlife monitoring ecological research. generate vast amounts data require careful processing, cleaning, analysis extract meaningful insights. Researchers use camera trap data tasks species identification, biodiversity assessment, activity pattern analysis, occupancy modeling. However, handling analyzing data can complex time-consuming.","code":""},{"path":"https://stangandaho.github.io/ct/index.html","id":"the-need-for-simplification","dir":"","previous_headings":"","what":"The Need for Simplification","title":"Camera Trap Data Management and Analysis","text":"Processing analyzing camera trap data R often requires multiple steps, cleaning raw data statistical modeling visualization. ct R package addresses challenges providing modern, tidyverse-friendly workflow camera trap data analysis. Using tidy evaluation principles, enables users efficiently manipulate transform datasets. Additionally, integrates seamlessly ggplot2, allowing users generate highly customizable visualizations.","code":""},{"path":"https://stangandaho.github.io/ct/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Camera Trap Data Management and Analysis","text":"ct package provides comprehensive suite 55+ functions covering complete camera trap data analysis workflow. Population density estimation supported ct_fit_ds() distance sampling automated model selection, ct_fit_rem() Random Encounter Models, ct_traprate_estimate() trap rate calculations. Data management capabilities include ct_independence() filtering independent detections, ct_correct_datetime() timestamp correction, ct_check_location() interactive spatial validation. Community ecology functions enable activity pattern analysis ct_plot_density() ct_overlap_estimates(), biodiversity assessment ct_alpha_diversity() ct_to_community(), occupancy modeling via ct_to_occupancy(). Quality control tools include ct_find_break() detecting temporal gaps, ct_plot_camtrap_activity() monitoring deployment status, ct_check_name() taxonomic validation. package also features Camera Trap Data Package integration, survey design tools ct_survey_design(), user-friendly Shiny application via ct_app() interactive analysis workflows. full overview available functions, please visit ct website","code":""},{"path":"https://stangandaho.github.io/ct/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation:","title":"Camera Trap Data Management and Analysis","text":"can install ct directly GitHub:","code":"# Install pak firstly if not installed if (!requireNamespace(\"pak\", quietly = TRUE)) {   install.packages(\"pak\", dependencies = TRUE) }  # Install maimer from GitHub pak::pkg_install(\"stangandaho/ct\")"},{"path":"https://stangandaho.github.io/ct/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Camera Trap Data Management and Analysis","text":"Please note project based Contributor Covenant v2.1. participating project agree abide terms.","code":""},{"path":"https://stangandaho.github.io/ct/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Camera Trap Data Management and Analysis","text":"encounter clear bug, please file issue minimal reproducible example. questions discussion, please use relevant section.","code":""},{"path":"https://stangandaho.github.io/ct/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Camera Trap Data Management and Analysis","text":"development ct package supported R Consortium Infrastructure Steering Committee (ISC) grant 25-ISC-1-04. funding enables creation comprehensive statistical tools camera trap data analysis, including population density estimation methods, standardized data integration workflows.","code":""},{"path":"https://stangandaho.github.io/ct/reference/bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bootstrap estimates of overlap — ct_bootstrap","title":"Generate bootstrap estimates of overlap — ct_bootstrap","text":"function takes two sets times observations calculates bootstrap estimates chosen estimator overlap. Alternatively, bootstrap estimates can calculated 2-stage process: (1) create matrix bootstrap samples data set, using ct_resample(); (2) pass matrices ct_boot_estimates() obtain bootstrap estimates. vector bootstrap estimates can used produce confidence intervals ct_boot_ci().","code":""},{"path":"https://stangandaho.github.io/ct/reference/bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bootstrap estimates of overlap — ct_bootstrap","text":"","code":"ct_bootstrap(   A,   B,   nb,   smooth = TRUE,   kmax = 3,   adjust = NA,   n_grid = 128,   type = c(\"Dhat1\", \"Dhat4\", \"Dhat5\"),   cores = 1 )  ct_resample(x, nb, smooth = TRUE, kmax = 3, adjust = 1, n_grid = 512)  ct_boot_estimates(   Amat,   Bmat,   kmax = 3,   adjust = c(0.8, 1, 4),   n_grid = 128,   type = c(\"all\", \"Dhat1\", \"Dhat4\", \"Dhat5\"),   cores = 1 )"},{"path":"https://stangandaho.github.io/ct/reference/bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bootstrap estimates of overlap — ct_bootstrap","text":"numeric vector time--day observations (radians) species . B numeric vector time--day observations (radians) species B. nb number bootstrap samples required smooth TRUE, smoothed bootstrap samples produced. kmax integer indicating maximum number modes allowed activity pattern. Default 3. adjust numeric value adjust bandwidth kernel density estimation. Default 1. n_grid integer specifying number grid points density estimation. Default 128. type name estimator use, \"\" produce three estimates. See ct_overlap_estimates() recommendations use. cores number cores use parallel processing. NA, one available cores used. Parallel processing may take longer serial processing bootstrap runs quickly. x numeric vector time--capture data radians, ie. [0, \\(2\\pi\\)] scale Amat, Bmat matrices resampled data species produced resample; see Value .","code":""},{"path":"https://stangandaho.github.io/ct/reference/bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bootstrap estimates of overlap — ct_bootstrap","text":"function ct_bootstrap() returns vector bootstrap estimates. estimation fails bootstrap sample, corresponding value NA. function ct_resample() returns numeric matrix column corresponding bootstrap sample. Times radians. may return matrix NAs smooth = TRUE bandwidth estimation fails. Function ct_boot_estimates() type = \"\" returns numeric matrix three columns, one estimator overlap, otherwise vector bootstrap estimates.","code":""},{"path":"https://stangandaho.github.io/ct/reference/bootstrap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate bootstrap estimates of overlap — ct_bootstrap","text":"Ridout & Linkie (2009) Estimating overlap daily activity patterns camera trap data. Journal Agricultural, Biological, Environmental Statistics 14:322-337","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/bootstrap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate bootstrap estimates of overlap — ct_bootstrap","text":"Mike Meredith, Martin Ridout.","code":""},{"path":"https://stangandaho.github.io/ct/reference/bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bootstrap estimates of overlap — ct_bootstrap","text":"","code":"# Generate random data for two species set.seed(42) species_A <- runif(100, 1.2, 2 * pi) species_B <- runif(100, 0.23, 2 * pi)  est <- ct_overlap_estimates(species_A, species_B, type=\"Dhat4\")  boots <- ct_bootstrap(species_A, species_B, 100, type=\"Dhat4\", cores=1) mean(boots) #> [1] 0.8303699 hist(boots)  ct_boot_ci(est, boots) #>            lower     upper #> norm   0.7866298 0.9819805 #> norm0  0.7596622 0.9550129 #> basic  0.7878713 0.9800004 #> basic0 0.7616424 0.9537715 #> perc   0.7346748 0.9268038  # alternatively: species_A_gen <- ct_resample(species_A, 100) species_B_gen <- ct_resample(species_B, 100) boots <- ct_boot_estimates(species_A_gen, species_B_gen, type=\"Dhat4\", cores=1) mean(boots) #> [1] 0.8314946"},{"path":"https://stangandaho.github.io/ct/reference/calc_active_periods.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate active periods for camera trap data — calc_active_periods","title":"Calculate active periods for camera trap data — calc_active_periods","text":"Internal helper function calculate continuous active periods based gap detection.","code":""},{"path":"https://stangandaho.github.io/ct/reference/calc_active_periods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate active periods for camera trap data — calc_active_periods","text":"","code":"calc_active_periods(data, threshold, time_unit)"},{"path":"https://stangandaho.github.io/ct/reference/calc_active_periods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate active periods for camera trap data — calc_active_periods","text":"data data frame containing datetime column. threshold numeric value indicating minimum gap considered break (default 10). time_unit unit threshold. Supported values include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\".","code":""},{"path":"https://stangandaho.github.io/ct/reference/calc_active_periods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate active periods for camera trap data — calc_active_periods","text":"tibble period_start period_end columns.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_QAIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute QAIC for a set of detection function models — ct_QAIC","title":"Compute QAIC for a set of detection function models — ct_QAIC","text":"Calculates quasi-Akaike Information Criterion (QAIC) one detection function models within key function family. multiple models provided, must key function. function typically used first step two-step model selection approach (Howe et al., 2019).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_QAIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute QAIC for a set of detection function models — ct_QAIC","text":"","code":"ct_QAIC(models, chat = NULL, k = 2)"},{"path":"https://stangandaho.github.io/ct/reference/ct_QAIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute QAIC for a set of detection function models — ct_QAIC","text":"models list fitted detection function models (objects returned Distance::ds() ct_fit_ds()). chat Optional numeric value overdispersion (\\(\\hat{c}\\)). provided, estimated parameterised model key function set. k Numeric. penalty term used QAIC (default 2).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_QAIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute QAIC for a set of detection function models — ct_QAIC","text":"tibble one row per model containing: model: model name df: degrees freedom model. QAIC: computed QAIC value.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_QAIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute QAIC for a set of detection function models — ct_QAIC","text":"one model supplied chat provided, function estimates \\(\\hat{c}\\) using provided model issues warning model selection performed. multiple models, models must use key function. QAIC calculated : $$QAIC = -2 \\times \\log(L) / \\hat{c} + 2k$$ \\(L\\) likelihood, \\(\\hat{c}\\) estimated overdispersion, \\(k\\) number parameters.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_QAIC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute QAIC for a set of detection function models — ct_QAIC","text":"Howe, E. J., Buckland, S. T., Després‐Einspenner, M., & Kühl, H. S. (2019). Model selection overdispersed distance sampling data. Methods Ecology Evolution, 10(1), 38-47. doi:10.1111/2041-210X.13082","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_QAIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute QAIC for a set of detection function models — ct_QAIC","text":"","code":"# \\donttest{ library(Distance) #> Loading required package: mrds #> This is mrds 3.0.1 #> Built: R 4.5.0; ; 2025-07-06 04:17:12 UTC; unix #>  #> Attaching package: ‘Distance’ #> The following object is masked from ‘package:mrds’: #>  #>     create.bins library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  data(\"duiker\") #> Warning: data set ‘duiker’ not found duiker_data <- duikers$DaytimeDistances %>%   dplyr::slice_sample(prop = .3) # sample 30% of rows truncation <- list(left = 2, right = 15) # Keep only distance between 2-15 m  # fit hazard-rate key models w3_hr0 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = NULL,              truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting hazard-rate key function #> AIC= 15007.689 w3_hr1 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = \"cos\",              order = 2, truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting hazard-rate key function with cosine(2) adjustments #> AIC= 15009.689 w3_hr2 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = \"cos\",              order = c(2, 4), truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting hazard-rate key function with cosine(2,4) adjustments #> AIC= 15011.693 # fit half-normal key models w3_hn0 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = NULL,              truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting half-normal key function #> AIC= 15034.041 w3_hn1 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = \"cos\",              order = 2, truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting half-normal key function with cosine(2) adjustments #> AIC= 15009.335 w3_hn2 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = \"cos\",              order = c(2, 4), truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting half-normal key function with cosine(2,4) adjustments #> AIC= 15004.757 # fit uniform key models w3_u0 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = NULL,             truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting uniform key function #> AIC= 17311.325 w3_u1 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = \"cos\",             order = 2, truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting uniform key function with cosine(2) adjustments #> AIC= 17313.325 w3_u2 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = \"cos\",             order = c(2, 4), truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting uniform key function with cosine(2,4) adjustments #> AIC= 17315.325  # Create model list model_list <- list(w3_hn0, w3_hn1, w3_hn2,                    w3_hr0, w3_hr1, w3_hr2,                    w3_u0, w3_u1, w3_u2)  # Compute model QAICs ct_QAIC(list(w3_hr0, w3_hr1, w3_hr2)) # All key functions must be the same #> # A tibble: 3 × 3 #>   model                                                    df  QAIC #>   <chr>                                                 <int> <dbl> #> 1 hazard-rate key function                                  2  52.3 #> 2 hazard-rate key function with cosine(2) adjustments       3  54.3 #> 3 hazard-rate key function with cosine(2,4) adjustments     4  56.3 ct_QAIC(list(w3_hn0, w3_hn1, w3_hn2)) # All key functions must be the same #> # A tibble: 3 × 3 #>   model                                                    df  QAIC #>   <chr>                                                 <int> <dbl> #> 1 half-normal key function                                  1  51.7 #> 2 half-normal key function with cosine(2) adjustments       2  53.6 #> 3 half-normal key function with cosine(2,4) adjustments     3  55.6  # Compute Chi-squared Goodness-of-fit ct_chi2_select(list(w3_hn0, w3_hr0, w3_u0)) # All key functions must be different #> # A tibble: 3 × 3 #>   key         model                    criteria #>   <chr>       <chr>                       <dbl> #> 1 half-normal half-normal key function     305. #> 2 hazard-rate hazard-rate key function     312. #> 3 uniform     uniform key function         455. ct_chi2_select(list(w3_hn2, w3_hr1, w3_u0)) # All key functions must be different #> # A tibble: 3 × 3 #>   key         model                                                 criteria #>   <chr>       <chr>                                                    <dbl> #> 1 half-normal half-normal key function with cosine(2,4) adjustments     315. #> 2 hazard-rate hazard-rate key function with cosine(2) adjustments       318. #> 3 uniform     uniform key function                                      455.  # Two-step model selection ct_select_model(model_list) #> $QAIC #> # A tibble: 9 × 6 #>      id key         model                                         df  QAIC best  #>   <int> <chr>       <chr>                                      <int> <dbl> <lgl> #> 1     1 half-normal half-normal key function                       1  51.7 TRUE  #> 2     2 half-normal half-normal key function with cosine(2) a…     2  53.6 FALSE #> 3     3 half-normal half-normal key function with cosine(2,4)…     3  55.6 FALSE #> 4     4 hazard-rate hazard-rate key function                       2  52.3 TRUE  #> 5     5 hazard-rate hazard-rate key function with cosine(2) a…     3  54.3 FALSE #> 6     6 hazard-rate hazard-rate key function with cosine(2,4)…     4  56.3 FALSE #> 7     7 uniform     uniform key function                           0  38.7 TRUE  #> 8     8 uniform     uniform key function with cosine(2) adjus…     1  40.7 FALSE #> 9     9 uniform     uniform key function with cosine(2,4) adj…     2  42.7 FALSE #>  #> $`Best QAIC models` #> $`Best QAIC models`[[1]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Half-normal key function  #>  #> Estimated abundance in covered region: 11630.7  #>  #> $`Best QAIC models`[[2]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Hazard-rate key function  #>  #> Estimated abundance in covered region: 8213.104  #>  #> $`Best QAIC models`[[3]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Uniform key function  #>  #> Estimated abundance in covered region: 3133.71  #>  #>  #> $Chi2 #> # A tibble: 3 × 4 #>   key         model                    criteria best  #>   <chr>       <chr>                       <dbl> <lgl> #> 1 half-normal half-normal key function     305. TRUE  #> 2 hazard-rate hazard-rate key function     312. FALSE #> 3 uniform     uniform key function         455. FALSE #>  #> $`Final model` #>  #> Distance sampling analysis object #>  #> Detection function: #>  Half-normal key function  #>  #> Estimated abundance in covered region: 11630.7  #>  # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_alpha_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Alpha diversity index — ct_alpha_diversity","title":"Alpha diversity index — ct_alpha_diversity","text":"Calculate index diversity within particular area ecosystem; usually expressed number species (.e., species richness) ecosystem.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_alpha_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alpha diversity index — ct_alpha_diversity","text":"","code":"ct_alpha_diversity(   data,   to_community = TRUE,   index = \"shannon\",   site_column,   species_column,   size_column = NULL,   margin = 1 )"},{"path":"https://stangandaho.github.io/ct/reference/ct_alpha_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alpha diversity index — ct_alpha_diversity","text":"data data frame containing species observation data. to_community Logical; TRUE, function first transforms data community matrix format sites rows species columns computing indices. Default TRUE. index character vector specifying diversity index calculate. Accepted values \"shannon\", \"simpson\", \"invsimpson\", \"evenness\", \"pielou\". Multiple indices can computed simultaneously providing vector. site_column column name data represents site location species recorded. species_column column(s) data representing species taxa. can single column name, range column indices (e.g., 2:5), selection helper (e.g., dplyr::starts_with(\"sp_\")). size_column (Optional) column data containing count abundance individuals per species. NULL, function assumes row represents one individual. margin integer specifying whether diversity calculations performed row (margin = 1) column (margin = 2). Default 1 (row-wise).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_alpha_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alpha diversity index — ct_alpha_diversity","text":"tibble diversity index values site. first column corresponds site_column, followed one columns containing computed diversity indices, depending values specified index argument.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_alpha_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alpha diversity index — ct_alpha_diversity","text":"Simpson diversity index Simpson (1949) introduced diversity index quantifies likelihood two randomly chosen individuals belonging species. probability increases diversity decreases; scenario diversity (one species), probability reaches 1. Simpson's Index computed using following formula: $$D = \\sum_{=1}^{S} \\left( \\frac{n_{}}{N} \\right)^2$$ \\(n_{}\\) number individuals species , N = total number individuals species, \\(\\frac{n_{}}{N} = pi\\) (proportion individuals species ), S = species richness. value Simpson’s D ranges 0 1, 0 representing infinite diversity 1 representing diversity, larger value D, lower diversity. reason, Simpson’s index often complement (1-D). Simpson's Dominance Index inverse Simpson's Index (\\(1/D\\)). Shannon-Weiner Diversity Index Shannon-Weiner Diversity Index measure diversity takes account species richness evenness, introduced Claude Shannon 1948. Commonly referred Shannon's Diversity Index, based concept uncertainty. instance, community low diversity, high level certainty (low uncertainty) identity randomly selected organism. Conversely, highly diverse community, uncertainty increases, making harder predict species randomly chosen organism belong (low certainty high uncertainty). $$H = -\\sum_{=1}^{S} p_{} * \\ln p_{}$$ \\(p_{}\\) = proportion individuals species , ln natural logarithm,  S = species richness. value H ranges 0 Hmax. Hmax different community depends species richness. (Note: Shannon-Weiner often denoted H' ). Pielou Evenness diversity index Species evenness refers relative abundance species within environment. example, 40 foxes 1000 dogs, community uneven one species dominates. However, 40 foxes 42 dogs, community much even, species balanced number. degree evenness community can quantified using Pielou's evenness index (Pielou, 1966): $$J=\\frac{H}{H_{\\max }}$$ value J ranges 0 1. Higher values indicate higher levels evenness. maximum evenness, J = 1. J D can used measures species dominance (opposite diversity) community. Low J indicates 1 species dominate community.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_alpha_diversity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Alpha diversity index — ct_alpha_diversity","text":"Pielou, E.C. (1966). measurement diversity different types biological collections. Journal Theoretical Biology, 13, pp. 131–144. 10.1016/0022-5193(66)90013-0. Simpson, E.H. (1949). Measurement diversity. Nature, 163, pp. 688. 10.1038/163688a0 Shannon, C.E. (1948). mathematical theory communication. Bell System Technical Journal, 27, pp. 379-423.10.1002/j.1538-7305.1948.tb01338.x","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_alpha_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alpha diversity index — ct_alpha_diversity","text":"","code":"cam_data <- read.csv(system.file('penessoulou_season1.csv', package = 'ct'))  # Transform data to community format and compute diversity indices alpha1 <- cam_data %>%   ct_alpha_diversity(     to_community = TRUE,     size_column = number,     site_column = camera,     species_column = species,     index = c(\"shannon\", \"evenness\", \"invsimpson\")   )  # Alternative method using a manually transformed community matrix alpha2 <- cam_data %>%   ct_to_community(site_column = camera, species_column = species,                   size_column = number, values_fill = 0) %>%   ct_alpha_diversity(     to_community = FALSE,     site_column = camera,     species_column = 2:11,     index = c(\"shannon\", \"evenness\", \"invsimpson\")   ) alpha2 #> # A tibble: 13 × 4 #>    camera          shannon evenness invsimpson #>    <chr>             <dbl>    <dbl>      <dbl> #>  1 CAMERA 10         0.103    0.045       1.04 #>  2 CAMERA 3          0.974    0.423       2.46 #>  3 CAMERA 5          0.893    0.388       2.18 #>  4 CAMERA 8          0.224    0.097       1.12 #>  5 CAMERA 2          0.509    0.221       1.34 #>  6 CAMERA 1          1.14     0.497       2.73 #>  7 CAMERA 12         0        0           1    #>  8 CAMERA 4          1.31     0.57        3.55 #>  9 CAMERA 11         0        0           1    #> 10 CAMERA 3 - Bait   0.562    0.244       1.6  #> 11 CAMERA 1 - Bait   0        0           1    #> 12 CAMERA 19         0.637    0.276       1.80 #> 13 FCPEN             0.131    0.057       1.06 # Compare results all(alpha1 == alpha2) # TRUE #> [1] TRUE"},{"path":"https://stangandaho.github.io/ct/reference/ct_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run App — ct_app","title":"Run App — ct_app","text":"Launch ct GUI image/video management","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run App — ct_app","text":"","code":"ct_app()"},{"path":"https://stangandaho.github.io/ct/reference/ct_availability.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal availability adjustment — ct_availability","title":"Temporal availability adjustment — ct_availability","text":"Calculates availability correction factors accounting temporal variation animal activity patterns camera deployment effort. availability rate represents proportion time animals available detection (Rowcliffe, et al., 2014; Howe et al., 2017) given activity patterns camera sampling effort.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_availability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal availability adjustment — ct_availability","text":"","code":"ct_availability(   times,   format = NULL,   sample = c(\"data\", \"model\"),   n_bootstrap = 1000,   cam_daily_effort = 24,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_availability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal availability adjustment — ct_availability","text":"times Vector detection times, either radians (0 - \\(2*pi\\)) formatted times (see format parameter). format Time format string (e.g., \"%H:%M:%S\", \"%H:%M\") times need conversion radians. Set NULL times already radians. sample Character string defining sampling method bootstrapping errors (see details). n_bootstrap Number bootstrap iterations perform. Ignored sample==\"none\" cam_daily_effort Daily operational hours cameras (default = 24 continuous operation). ... Arguments passed ct_fit_activity weights numeric vector weights dat value. bandwidth Numeric value kernel bandwidth. NULL, calculated internally. adjustment Numeric bandwidth adjustment multiplier. bounds two-element vector defining radian bounds truncate. show Logical whether show progress bar bootstrapping.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_availability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal availability adjustment — ct_availability","text":"list containing data frame : rate: Estimated availability rate (0-1) SE: Standard error availability rate","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_availability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Temporal availability adjustment — ct_availability","text":"Howe, E. J., Buckland, S. T., Després-Einspenner, M. L., & Kühl, H. S. (2017). Distance sampling camera traps. Methods Ecology Evolution, 8(11), 1558–1565. doi:10.1111/2041-210X.12790 Rowcliffe, J. M., Kays, R., Kranstauber, B., Carbone, C., & Jansen, P. . (2014). Quantifying levels animal activity using camera trap data. Methods Ecology Evolution, 5(11), 1170–1179.  doi:10.1111/2041-210X.12278","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_availability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal availability adjustment — ct_availability","text":"","code":"# \\donttest{ # Example with times already in radians radian_times <- c(1.2, 3.4, 5.1, 0.5, 2.8) ct_availability(radian_times, sample = \"data\") #> Warning: max(dat) < 1, expecting radian data #> Warning: max(dat) < 1, expecting radian data #> $creation #>        rate         SE #> 1 0.4614052 0.08683349 #>   # Example with formatted times time_strings <- c(\"06:30\", \"18:15\", \"12:00\", \"23:45\") ct_availability(time_strings, sample = \"data\", format = \"%H:%M\") #> $creation #>        rate        SE #> 1 0.9499413 0.2171634 #>   # With bootstrap resampling ct_availability(radian_times, sample = \"data\", n_bootstrap = 100) #> $creation #>        rate         SE #> 1 0.4614052 0.07927602 #>  # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_boot_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap confidence intervals — ct_boot_ci","title":"Bootstrap confidence intervals — ct_boot_ci","text":"Confidence interval calculation bootstrap samples.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_boot_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap confidence intervals — ct_boot_ci","text":"","code":"ct_boot_ci(t0, bt, conf = 0.95)"},{"path":"https://stangandaho.github.io/ct/reference/ct_boot_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap confidence intervals — ct_boot_ci","text":"t0 statistic estimated original sample, usually output ct_overlap_estimates() bt vector bootstrap statistics, usually output ct_boot_estimates() conf (single!) confidence interval estimate.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_check_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive camera trap location adjustment — ct_check_location","title":"Interactive camera trap location adjustment — ct_check_location","text":"function launches shiny application allows users visualize manually adjust geographic coordinates camera trap locations. Users can drag points interactive map update positions camera traps, updated dataset saved global environment.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_check_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive camera trap location adjustment — ct_check_location","text":"","code":"ct_check_location(   data,   longitude,   latitude,   location_name,   coord_system = c(\"geographic\", \"projected\"),   crs,   new_data_name )"},{"path":"https://stangandaho.github.io/ct/reference/ct_check_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive camera trap location adjustment — ct_check_location","text":"data data frame containing camera trap data processed. longitude string representing column name longitude dataset. latitude string representing column name latitude dataset. location_name string representing column name location name unique identifier camera trap point. coord_system string specifying coordinate system input data. Choices \"geographic\" longitude latitude, \"projected\" projected coordinates. crs integer representing coordinate reference system (CRS) EPSG format. Required coord_system = \"projected\". new_data_name string specifying name new dataset updated coordinates created global environment.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_check_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive camera trap location adjustment — ct_check_location","text":"shiny application launched display map allow manual coordinate adjustments. modified dataset saved global environment name provided new_data_name.","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_check_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check species name and retrieve Taxonomic Serial Number (TSN) from ITIS — ct_check_name","title":"Check species name and retrieve Taxonomic Serial Number (TSN) from ITIS — ct_check_name","text":"function queries Integrated Taxonomic Information System (ITIS) find taxonomic details given species name.  can search using either scientific name common name return relevant taxonomic information, including TSN.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_check_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check species name and retrieve Taxonomic Serial Number (TSN) from ITIS — ct_check_name","text":"","code":"ct_check_name(   species_name,   search_type = c(\"common_name\", \"scientific_name\"),   ask = FALSE )"},{"path":"https://stangandaho.github.io/ct/reference/ct_check_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check species name and retrieve Taxonomic Serial Number (TSN) from ITIS — ct_check_name","text":"species_name character string specifying species name search . single name allowed. search_type character string specifying type search. Options: \"scientific_name\": Search scientific name. \"common_name\": Search common name. ask logical value (TRUE FALSE). TRUE, allows interactive selection multiple matches found.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_check_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check species name and retrieve Taxonomic Serial Number (TSN) from ITIS — ct_check_name","text":"tibble containing taxonomic details: search: original species name queried. tsn: Taxonomic Serial Number (TSN) ITIS. common_name: common name species (available). scientific_name: scientific name species. author: author classified species. itis_url: direct link species report ITIS. taxon_status: taxonomic status species.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_check_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check species name and retrieve Taxonomic Serial Number (TSN) from ITIS — ct_check_name","text":"necessary packages (httr2, xml2) installed, function prompts user install . multiple results found ask = TRUE, user prompted select correct match. exact match found, results displayed manual selection.","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_check_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check species name and retrieve Taxonomic Serial Number (TSN) from ITIS — ct_check_name","text":"","code":"# \\donttest{ # Search for a species by scientific name ct_check_name(\"Panthera leo\", search_type = \"scientific_name\") #> # A tibble: 13 × 7 #>    search       tsn    common_name  scientific_name author itis_url taxon_status #>    <chr>        <chr>  <chr>        <chr>           <chr>  <chr>    <chr>        #>  1 Panthera leo 183803 Lion         Panthera leo    Linna… https:/… valid        #>  2 Panthera leo 622026 Asiatic lion Panthera leo p… Meyer… https:/… invalid      #>  3 Panthera leo 622059 Barbary lion Panthera leo l… Linna… https:/… valid        #>  4 Panthera leo 726446 NA           Panthera leo a… J. A.… https:/… invalid      #>  5 Panthera leo 726447 NA           Panthera leo b… Lönnb… https:/… invalid      #>  6 Panthera leo 726448 NA           Panthera leo h… J. A.… https:/… invalid      #>  7 Panthera leo 726449 NA           Panthera leo k… Matsc… https:/… invalid      #>  8 Panthera leo 726450 NA           Panthera leo k… Rober… https:/… invalid      #>  9 Panthera leo 726451 NA           Panthera leo m… Neuma… https:/… invalid      #> 10 Panthera leo 726452 South Afric… Panthera leo m… C. E.… https:/… valid        #> 11 Panthera leo 726453 NA           Panthera leo n… Helle… https:/… invalid      #> 12 Panthera leo 726454 NA           Panthera leo s… J. N.… https:/… invalid      #> 13 Panthera leo 933424 NA           Panthera leo n… de Bl… https:/… invalid       # Search by common name with interactive selection ct_check_name(\"Lion\", search_type = \"common_name\") #> # A tibble: 1,100 × 7 #>    search tsn   common_name scientific_name         author itis_url taxon_status #>    <chr>  <chr> <chr>       <chr>                   <chr>  <chr>    <chr>        #>  1 Lion   5272  NA          Nitzschia tryblionella… Arn. … https:/… not accepted #>  2 Lion   10885 NA          Chilionema              NA     https:/… accepted     #>  3 Lion   10886 NA          Chilionema ocellatum    Kuetz… https:/… accepted     #>  4 Lion   10887 NA          Chilionema reptans      NA     https:/… accepted     #>  5 Lion   11682 NA          Nemalion                Duby   https:/… accepted     #>  6 Lion   11683 NA          Nemalion multifidum     NA     https:/… accepted     #>  7 Lion   11684 NA          Nemalion helminthoides  Velle… https:/… accepted     #>  8 Lion   11685 NA          Nemalion pulvinatum     NA     https:/… accepted     #>  9 Lion   11686 NA          Nemalion virens         NA     https:/… accepted     #> 10 Lion   11687 NA          Nemalion lubricum       Duby,… https:/… accepted     #> # ℹ 1,090 more rows # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_chi2_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","title":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","text":"Compares detection function models different key functions using ratio chi-squared statistic degrees freedom. method selects best model among different key functions best adjustment term model chosen key function.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_chi2_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","text":"","code":"ct_chi2_select(models)"},{"path":"https://stangandaho.github.io/ct/reference/ct_chi2_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","text":"models list fitted detection function models (objects returned Distance::ds() ct_fit_ds()).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_chi2_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","text":"tibble one row per model containing: key: key function model. model: model name. criteria: chi-squared goodness--fit statistic divided degrees freedom, .e. \\(\\chi^2/\\mathrm{df}\\). Lower values indicate better fit.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_chi2_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","text":"one model supplied, function returns chi-squared goodness--fit ratio model issues warning model selection performed. multiple models, must unique key function. step designed applied selecting best model within key function family using QAIC (see ct_QAIC()). model smallest chi-squared/df ratio typically preferred.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_chi2_select.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","text":"Howe, E. J., Buckland, S. T., Després‐Einspenner, M., & Kühl, H. S. (2019). Model selection overdispersed distance sampling data. Methods Ecology Evolution, 10(1), 38-47. doi:10.1111/2041-210X.13082","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_chi2_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select best detection function model by Chi-squared Goodness-of-fit — ct_chi2_select","text":"","code":"# \\donttest{ library(Distance) library(dplyr)  data(\"duiker\") #> Warning: data set ‘duiker’ not found duiker_data <- duikers$DaytimeDistances %>%   dplyr::slice_sample(prop = .3) # sample 30% of rows truncation <- list(left = 2, right = 15) # Keep only distance between 2-15 m  # fit hazard-rate key models w3_hr0 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = NULL,              truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting hazard-rate key function #> AIC= 15016.7 w3_hr1 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = \"cos\",              order = 2, truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting hazard-rate key function with cosine(2) adjustments #> AIC= 15017.437 w3_hr2 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = \"cos\",              order = c(2, 4), truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting hazard-rate key function with cosine(2,4) adjustments #> AIC= 15014.516 # fit half-normal key models w3_hn0 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = NULL,              truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting half-normal key function #> AIC= 15028.793 w3_hn1 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = \"cos\",              order = 2, truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting half-normal key function with cosine(2) adjustments #> AIC= 15002.329 w3_hn2 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = \"cos\",              order = c(2, 4), truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting half-normal key function with cosine(2,4) adjustments #> AIC= 15000.258 # fit uniform key models w3_u0 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = NULL,             truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting uniform key function #> AIC= 17381.336 w3_u1 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = \"cos\",             order = 2, truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting uniform key function with cosine(2) adjustments #> AIC= 17383.336 w3_u2 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = \"cos\",             order = c(2, 4), truncation = truncation) #> Warning: Unknown or uninitialised column: `distbegin`. #> Warning: Unknown or uninitialised column: `distend`. #> Warning: Unknown or uninitialised column: `distbegin`. #> Fitting uniform key function with cosine(2,4) adjustments #> AIC= 17385.336  # Create model list model_list <- list(w3_hn0, w3_hn1, w3_hn2,                    w3_hr0, w3_hr1, w3_hr2,                    w3_u0, w3_u1, w3_u2)  # Compute model QAICs ct_QAIC(list(w3_hr0, w3_hr1, w3_hr2)) # All key functions must be the same #> # A tibble: 3 × 3 #>   model                                                    df  QAIC #>   <chr>                                                 <int> <dbl> #> 1 hazard-rate key function                                  2  52.2 #> 2 hazard-rate key function with cosine(2) adjustments       3  54.2 #> 3 hazard-rate key function with cosine(2,4) adjustments     4  56.2 ct_QAIC(list(w3_hn0, w3_hn1, w3_hn2)) # All key functions must be the same #> # A tibble: 3 × 3 #>   model                                                    df  QAIC #>   <chr>                                                 <int> <dbl> #> 1 half-normal key function                                  1  51.3 #> 2 half-normal key function with cosine(2) adjustments       2  53.2 #> 3 half-normal key function with cosine(2,4) adjustments     3  55.2  # Compute Chi-squared Goodness-of-fit ct_chi2_select(list(w3_hn0, w3_hr0, w3_u0)) # All key functions must be different #> # A tibble: 3 × 3 #>   key         model                    criteria #>   <chr>       <chr>                       <dbl> #> 1 half-normal half-normal key function     308. #> 2 hazard-rate hazard-rate key function     315. #> 3 uniform     uniform key function         462. ct_chi2_select(list(w3_hn2, w3_hr1, w3_u0)) # All key functions must be different #> # A tibble: 3 × 3 #>   key         model                                                 criteria #>   <chr>       <chr>                                                    <dbl> #> 1 half-normal half-normal key function with cosine(2,4) adjustments     318. #> 2 hazard-rate hazard-rate key function with cosine(2) adjustments       319. #> 3 uniform     uniform key function                                      462.  # Two-step model selection ct_select_model(model_list) #> $QAIC #> # A tibble: 9 × 6 #>      id key         model                                         df  QAIC best  #>   <int> <chr>       <chr>                                      <int> <dbl> <lgl> #> 1     1 half-normal half-normal key function                       1  51.3 TRUE  #> 2     2 half-normal half-normal key function with cosine(2) a…     2  53.2 FALSE #> 3     3 half-normal half-normal key function with cosine(2,4)…     3  55.2 FALSE #> 4     4 hazard-rate hazard-rate key function                       2  52.2 TRUE  #> 5     5 hazard-rate hazard-rate key function with cosine(2) a…     3  54.2 FALSE #> 6     6 hazard-rate hazard-rate key function with cosine(2,4)…     4  56.2 FALSE #> 7     7 uniform     uniform key function                           0  38.2 TRUE  #> 8     8 uniform     uniform key function with cosine(2) adjus…     1  40.2 FALSE #> 9     9 uniform     uniform key function with cosine(2,4) adj…     2  42.2 FALSE #>  #> $`Best QAIC models` #> $`Best QAIC models`[[1]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Half-normal key function  #>  #> Estimated abundance in covered region: 11870.29  #>  #> $`Best QAIC models`[[2]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Hazard-rate key function  #>  #> Estimated abundance in covered region: 8205.621  #>  #> $`Best QAIC models`[[3]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Uniform key function  #>  #> Estimated abundance in covered region: 3139.819  #>  #>  #> $Chi2 #> # A tibble: 3 × 4 #>   key         model                    criteria best  #>   <chr>       <chr>                       <dbl> <lgl> #> 1 half-normal half-normal key function     308. TRUE  #> 2 hazard-rate hazard-rate key function     315. FALSE #> 3 uniform     uniform key function         462. FALSE #>  #> $`Final model` #>  #> Distance sampling analysis object #>  #> Detection function: #>  Half-normal key function  #>  #> Estimated abundance in covered region: 11870.29  #>  # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence interval — ct_ci","title":"Calculate confidence interval — ct_ci","text":"Calculates confidence interval mean numeric vector using t-distribution.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence interval — ct_ci","text":"","code":"ct_ci(x, alpha = 0.05, side = \"all\")"},{"path":"https://stangandaho.github.io/ct/reference/ct_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence interval — ct_ci","text":"x numeric vector data values. alpha Significance level confidence interval. Default 0.05 (95% confidence). side character string indicating type interval: \"\" Two-sided confidence interval (default). \"left\" One-sided lower bound. \"right\" One-sided upper bound.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence interval — ct_ci","text":"numeric vector containing confidence interval bounds: side = \"\", returns vector length 2: c(lower, upper). side = \"left\" \"right\", returns single numeric value.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence interval — ct_ci","text":"","code":"x <- c(10, 12, 11, 14, 13, 15) ct_ci(x) #> [1] 10.53669 14.46331 ct_ci(x, alpha = 0.01) #> [1]  9.4204 15.5796 ct_ci(x, side = \"left\") #> [1] 10.53669"},{"path":"https://stangandaho.github.io/ct/reference/ct_correct_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct camera trap datetime records — ct_correct_datetime","title":"Correct camera trap datetime records — ct_correct_datetime","text":"function corrects datetime stamps camera trap data using reference correction table. applies time adjustments based known timing errors camera deployment.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_correct_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct camera trap datetime records — ct_correct_datetime","text":"","code":"ct_correct_datetime(data, datetime, deployment, corrector, format = NULL)"},{"path":"https://stangandaho.github.io/ct/reference/ct_correct_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct camera trap datetime records — ct_correct_datetime","text":"data data.frame tibble containing camera trap records datetime information needs correction. datetime Column name (unquoted) data containing datetime values corrected. Can character POSIXct format. deployment Column name (unquoted) data corrector identifies unique camera deployments (e.g., camera ID, site name, deployment identifier). corrector data.frame containing correction information columns: deployment column matching deployment parameter sign - character indicating correction direction (\"+\" \"-\") datetimes - reference datetime showing correct time format Optional datetime format specification. Can : NULL (default) - attempts multiple common formats Single format string - used data corrector datetimes Vector 2 format strings - first data, second corrector","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_correct_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct camera trap datetime records — ct_correct_datetime","text":"data.frame original data plus additional columns: corrected_datetime - corrected datetime POSIXct correction_applied - sign correction applied time_offset_seconds - magnitude correction seconds corrector_reference - reference datetime used correction","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_correct_datetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct camera trap datetime records — ct_correct_datetime","text":"","code":"# Load camera trap data library(dplyr)  camtrap_data <- read.csv(ct:::table_files()[1]) %>%   dplyr::filter(project == \"Last\")  # Create correction table # CAMERA 1 was running slow (+), CAMERA 2 was running fast (-) crtor <- data.frame(   camera = c(\"CAMERA 1\", \"CAMERA 2\"),   sign = c(\"+\", \"-\"),   datetimes = c(\"2025-03-14 8:17:00\", \"2024-11-14 10:02:03\") )  # Apply datetime corrections ct_correct_datetime(   data = camtrap_data,   datetime = datetimes,   deployment = camera,   corrector = crtor ) %>%   dplyr::select(datetimes,                 corrected_datetime,                 time_offset_seconds) %>%   dplyr::slice_head(n = 10) #>              datetimes  corrected_datetime time_offset_seconds #> 1   2024-03-24 8:03:07 2025-03-14 08:17:00            30672833 #> 2   2024-03-24 8:03:07 2025-03-14 08:17:00            30672833 #> 3   2024-03-24 8:03:08 2025-03-14 08:17:01            30672833 #> 4  2024-03-24 20:19:35 2025-03-14 20:33:28            30672833 #> 5  2024-03-24 20:19:35 2025-03-14 20:33:28            30672833 #> 6  2024-03-24 20:19:35 2025-03-14 20:33:28            30672833 #> 7  2024-03-24 20:20:02 2025-03-14 20:33:55            30672833 #> 8  2024-03-24 20:20:02 2025-03-14 20:33:55            30672833 #> 9  2024-03-24 20:20:03 2025-03-14 20:33:56            30672833 #> 10 2024-03-24 20:20:24 2025-03-14 20:34:17            30672833"},{"path":"https://stangandaho.github.io/ct/reference/ct_create_hs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or add hierarchical subject values in image metadata — ct_create_hs","title":"Create or add hierarchical subject values in image metadata — ct_create_hs","text":"Create add hierarchical subject values image metadata","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_create_hs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or add hierarchical subject values in image metadata — ct_create_hs","text":"","code":"ct_create_hs(path, value = c(), intern = TRUE, quiet = TRUE, ...)"},{"path":"https://stangandaho.github.io/ct/reference/ct_create_hs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or add hierarchical subject values in image metadata — ct_create_hs","text":"path character vector specifying full path image file. value named character vector specifying new hierarchical subjects add. value must parent specified name, e.g c(\"Species\" = \"Vulture\"). intern TRUE output returned character vector. quiet Suppress output command . ... additional arguments passed system2()","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_create_hs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or add hierarchical subject values in image metadata — ct_create_hs","text":"","code":"# Image path image_path <- file.path(system.file(\"img\", package = \"ct\"), \"large.jpeg\")  # Get Hierarchical Subject from the image - Before use ct_create_hs() ct_get_hs(path = image_path) #==> NULL #> [1] \"Species|Vulture\"  ct_create_hs(path = image_path, value = c(\"Species\" = \"Vulture\")) #> Warning: error in running command #> [1]   # Get Hierarchical Subject from the image - Before use ct_create_hs() ct_get_hs(path = image_path) #==> \"Species|Vulture\" #> [1] \"Species|Vulture\""},{"path":"https://stangandaho.github.io/ct/reference/ct_describe_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistic on dataset — ct_describe_df","title":"Descriptive statistic on dataset — ct_describe_df","text":"function provides summary dataset, including numeric non-numeric variables. numeric variables, calculates basic descriptive statistics minimum, maximum, median, mean, count non-missing values. Additionally, users can pass custom functions via fn argument compute additional statistics numeric variables. non-numeric variables, provides frequency counts proportions unique value.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_describe_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistic on dataset — ct_describe_df","text":"","code":"ct_describe_df(data, ..., fn = NULL)"},{"path":"https://stangandaho.github.io/ct/reference/ct_describe_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistic on dataset — ct_describe_df","text":"data data frame containing dataset summarized. ... (Optional) Column include summary. column specifie, columns data included. fn named list functions apply numeric variables. function must accept x vector numeric values return single value named vector. Additional arguments functions can specified list. example: fn = list('sum' = list(na.rm = TRUE), 'sd').","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_describe_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descriptive statistic on dataset — ct_describe_df","text":"tibble","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_describe_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistic on dataset — ct_describe_df","text":"","code":"ct_describe_df(data = data.frame(x = c(1:3, NA),                                  y = c(3:4, NA, NA),                                  z = c(\"A\", \"A\", \"B\", \"A\")),                y, x, z,                fn = list('sum' = list(na.rm = TRUE), 'sd' = list(na.rm = TRUE))               ) #> # A tibble: 4 × 12 #>   Group  Prop     N Variable   Min   Max Median  Mean `CI Right` `CI Left`   sum #>   <chr> <dbl> <int> <chr>    <dbl> <dbl>  <dbl> <dbl>      <dbl>     <dbl> <int> #> 1 NA       NA     2 y            3     4    3.5   3.5       9.85    -2.85      7 #> 2 NA       NA     3 x            1     3    2     2         4.48    -0.484     6 #> 3 A        75     3 z           NA    NA   NA    NA        NA       NA        NA #> 4 B        25     1 z           NA    NA   NA    NA        NA       NA        NA #> # ℹ 1 more variable: sd <dbl>"},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dissimilarity between communities — ct_dissimilarity","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"function computes dissimilarity indices useful popular community ecologists. indices use quantitative data, although named corresponding binary index, can calculate binary index using appropriate argument. find favourite index , can see can implemented using designdist. Gower, Bray–Curtis, Jaccard Kulczynski indices good detecting underlying ecological gradients (Faith et al. 1987). Morisita, Horn–Morisita, Binomial, Cao Chao indices able handle different sample sizes (Wolda 1981, Krebs 1999, Anderson & Millar 2004), Mountford (1962) Raup-Crick indices presence–absence data able handle unknown (variable) sample sizes. indices discussed Krebs (1999) Legendre & Legendre (2012), properties compared Wolda (1981) Legendre & De Cáceres (2012). Aitchison (1986) distance equivalent Euclidean distance CLR-transformed samples (\"clr\") deals positive compositional data. Robust Aitchison distance Martino et al. (2019) uses robust CLR (\"rlcr\"), making applicable non-negative data including zeroes (unlike standard Aitchison).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"","code":"ct_dissimilarity(   data,   to_community = FALSE,   site_column,   species_column,   size_column = NULL,   method = \"bray\",   binary = FALSE,   diag = FALSE,   upper = FALSE,   na.rm = FALSE,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"data data frame matrix containing species abundance data. rows represent sites (samples), columns represent species. data can raw transformed format (to_community = TRUE). to_community logical indicating whether input data transformed community data (site row species column). Default FALSE. site_column name column representing site/sample identifiers (used to_community = TRUE). species_column name column representing species identifiers (used to_community = TRUE). size_column name column representing size abundance counts species site (optional, used to_community = TRUE). method character string indicating distance measure use calculating beta diversity. available methods : \"manhattan\", \"euclidean\", \"canberra\", \"bray\", \"kulczynski\", \"gower\", \"morisita\", \"horn\", \"mountford\", \"jaccard\", \"raup\", \"binomial\", \"chao\", \"altGower\", \"cao\", \"mahalanobis\", \"clark\", \"chisq\", \"chord\", \"hellinger\", \"aitchison\", \"robust.aitchison\". default \"bray\". binary logical indicating whether transform data presence/absence (binary data) calculating dissimilarities. Default FALSE. diag logical indicating whether include diagonal output dissimilarity matrix. Default FALSE (diagonal values omitted). upper logical indicating whether return upper triangular part dissimilarity matrix. Default FALSE. na.rm logical indicating whether remove NA values data calculating dissimilarities. Default FALSE. FALSE, error raised missing values data. ... Additional arguments passed functions, transformation functions data scaling standardization.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"distance matrix (class dist) containing pairwise dissimilarities sites. dissimilarities calculated according chosen distance metric, various attributes (e.g., method, size, labels) attached result.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"Jaccard (\"jaccard\"), Mountford (\"mountford\"),   Raup–Crick (\"raup\"), Binomial Chao indices discussed   later section.  function also finds indices presence/   absence data setting binary = TRUE. following overview   gives first quantitative version, \\(x_{ij}\\)   \\(x_{ik}\\) refer quantity species (column) \\(\\)   sites (rows) \\(j\\) \\(k\\). binary versions \\(\\)   \\(B\\) numbers species compared sites, \\(J\\)   number species occur compared sites similarly   designdist (many indices produce identical binary   versions):  Jaccard index computed \\(2B/(1+B)\\), \\(B\\)   Bray–Curtis dissimilarity. Binomial index derived Binomial deviance null hypothesis   two compared communities equal. able   handle variable sample sizes. index fixed upper   limit, can vary among sites shared species.   discussion, see Anderson & Millar (2004). Cao index CYd index (Cao et al. 1997) suggested minimally   biased index high beta diversity variable sampling intensity.   Cao index fixed upper limit, can vary among sites   shared species.  index intended count (integer)   data, undefined zero abundances; replaced   arbitrary value \\(0.1\\) following Cao et al. (1997).  Cao et   al. (1997) used \\(\\log_{10}\\), current function uses   natural logarithms values approximately \\(2.30\\)   times higher 10-based logarithms. Anderson & Thompson (2004)   give alternative formulation Cao index highlight   relationship Binomial index (). Mountford index defined \\(M = 1/\\alpha\\) \\(\\alpha\\)   parameter Fisher's logseries assuming compared   communities samples community   (cf. fisherfit, fisher.alpha). index   \\(M\\) found positive root equation \\(\\exp() +   \\exp(bM) = 1 + \\exp[(+b-j)M]\\), \\(j\\) number species occurring   communities, \\(\\) \\(b\\) number species   separate community (index uses presence–absence   information). Mountford index usually misrepresented   literature: indeed Mountford (1962) suggested approximation   used starting value iterations, proper index   defined root equation . function   vegdist solves \\(M\\) Newton method. Please note   either \\(\\) \\(b\\) equal \\(j\\), one   communities subset , dissimilarity   \\(0\\) meaning non-identical objects may regarded   similar index non-metric. Mountford index   range \\(0 \\dots \\log(2)\\). Raup–Crick dissimilarity (method = \"raup\") probabilistic   index based presence/absence data.  defined \\(1 -   prob(j)\\), based probability observing least \\(j\\)   species shared compared communities.  current function uses   analytic result hypergeometric distribution   (phyper) find probabilities.  probability   (index) dependent number species missing   sites, adding -zero species data removing missing   species data influence index.  probability (  index) may almost zero almost one wide range   parameter values.  index nonmetric: two communities   shared species may dissimilarity slightly one, two   identical communities may dissimilarity slightly zero.   index uses equal occurrence probabilities species, Raup   Crick originally suggested sampling probabilities   proportional species frequencies (Chase et al. 2011). simulation   approach unequal species sampling probabilities implemented   raupcrick function following Chase et al. (2011).    index can also used transposed data give probabilistic   dissimilarity index species co-occurrence (identical Veech   2013). Chao index tries take account number unseen species   pairs, similarly method = \"chao\"   specpool. Function vegdist implements   Jaccard, index defined   \\(1-\\frac{U \\times V}{U + V - U \\times V}\\);   types can defined function chaodist. Chao   equation, \\(U = C_j/N_j + (N_k - 1)/N_k \\times a_1/(2 a_2) \\times   S_j/N_j\\),   \\(V\\) similar except site index   \\(k\\). \\(C_j\\) total number individuals   species site \\(j\\) shared site \\(k\\),   \\(N_j\\) total number individuals site \\(j\\),   \\(a_1\\) (\\(a_2\\)) number species   occurring site \\(j\\) one (two) individuals   site \\(k\\), \\(S_j\\) total number individuals   species present site \\(j\\) occur one   individual site \\(k\\) (Chao et al. 2005). Morisita index can used genuine count data (integers) .   Horn–Morisita variant able handle abundance data. Mahalanobis distances Euclidean distances matrix   columns centred, unit variance, uncorrelated.    index commonly used community data, sometimes   used environmental variables. calculation based   transforming data matrix using Euclidean distances   following Mardia et al. (1979). Mahalanobis transformation   usually fails number columns larger number   rows (sampling units). transformation fails,   distances nearly constant except small numeric noise. Users   must check returned Mahalanobis distances meaningful. Euclidean Manhattan dissimilarities good gradient   separation without proper standardization still included   comparison special needs. Chi-square distances (\"chisq\") Euclidean distances   Chi-square transformed data (see decostand).   internal standardization used correspondence analysis   (cca, decorana). Weighted principal   coordinates analysis distances row sums weights   equal correspondence analysis (see Example   wcmdscale). Chi-square distance intended   non-negative data, typical community data. However, can   calculated long margin sums positive, warning   issued negative data entries. Chord distances (\"chord\") Euclidean distance matrix   rows standardized unit norm (sums squares 1)   using decostand. Geometrically standardization   moves row points surface multidimensional unit sphere,   distances chords across hypersphere. Hellinger distances   (\"hellinger\") related Chord distances, data   standardized unit total (row sums 1) using   decostand, square root transformed.   distances upper limit \\(\\sqrt{2}\\). Bray–Curtis Jaccard indices rank-order similar,   indices become identical rank-order similar   standardizations, especially presence/absence transformation   equalizing site totals decostand. Jaccard index   metric, probably preferred instead default   Bray-Curtis semimetric. Aitchison distance (1986) robust Aitchison distance   (Martino et al. 2019) metrics deal   compositional data. Aitchison distance said   outperform Jensen-Shannon divergence Bray-Curtis dissimilarity,   due better stability subsetting aggregation,   proper distance (Aitchison et al., 2000). naming conventions vary. one adopted traditional   rather truthful priority. function finds either   quantitative binary variants indices name,   correctly may refer one alternatives   instance, Bray   index known also Steinhaus, Czekanowski   Sørensen index.   quantitative version Jaccard probably called   Ružička index.   abbreviation \"horn\" Horn–Morisita index   misleading, since separate Horn index. abbreviation   changed index implemented vegan.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"function alternative dist adding   ecologically meaningful indices.  methods produce similar   types objects can interchanged method accepting   either.  Manhattan Euclidean dissimilarities identical   methods. Canberra index divided number variables   vegdist, dist.  differ   constant multiplier, alternative vegdist   range (0,1).  Function daisy (package   cluster) provides alternative implementation Gower index   also can handle mixed data numeric class variables.    two versions Gower distance (\"gower\", \"altGower\")   differ scaling: \"gower\" divides distances   number observations (rows) scales column unit range,   \"altGower\" omits double-zeros divides number   pairs least one -zero value, scale columns   (Anderson et al. 2006).  can use decostand add   range standardization \"altGower\" (see Examples). Gower   (1971) suggested omitting double zeros presences, often   taken general feature Gower distances. See Examples   implementing Anderson et al. (2006) variant Gower index. dissimilarity indices vegdist designed   community data, give misleading values   negative data entries.  results may also misleading   NA NaN empty sites.  principle,   study species composition without species remove   empty sites community data.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"Aitchison, J. Statistical Analysis Compositional Data (1986).   London, UK: Chapman & Hall. Aitchison, J., Barceló-Vidal, C.,   Martín-Fernández, J.., Pawlowsky-Glahn, V. (2000).   Logratio analysis compositional distance.   Math. Geol. 32, 271–275. Anderson, M.J. Millar, R.B. (2004). Spatial variation effects   habitat temperate reef fish assemblages northeastern New   Zealand.  Journal Experimental Marine Biology Ecology   305, 191–221. Anderson, M.J., Ellingsen, K.E. & McArdle, B.H. (2006). Multivariate   dispersion measure beta diversity. Ecology Letters   9, 683–693. Anderson, M.J & Thompson, .. (2004). Multivariate control charts   ecological environmental monitoring. Ecological     Applications 14, 1921–1935. Cao, Y., Williams, W.P. & Bark, .W. (1997). Similarity measure bias   river benthic Auswuchs community analysis. Water   Environment Research 69, 95–106. Chao, ., Chazdon, R. L., Colwell, R. K. Shen, T. (2005). new   statistical approach assessing similarity species composition   incidence abundance data. Ecology Letters 8, 148–159. Chase, J.M., Kraft, N.J.B., Smith, K.G., Vellend, M. Inouye,   B.D. (2011). Using null models disentangle variation community   dissimilarity variation \\(\\alpha\\)-diversity.   Ecosphere 2:art24 doi:10.1890/ES10-00117.1 Faith, D. P, Minchin, P. R. Belbin, L. (1987).   Compositional dissimilarity robust measure ecological   distance. Vegetatio 69, 57–68. Gower, J. C. (1971). general coefficient similarity   properties. Biometrics 27, 623–637. Krebs, C. J. (1999). Ecological Methodology. Addison Wesley   Longman. Legendre, P. & De Cáceres, M. (2012). Beta diversity   variance community data: dissimilarity coefficients   partitioning. Ecology Letters 16, 951–963.   doi:10.1111/ele.12141 Legendre, P. Legendre, L. (2012) Numerical Ecology. 3rd English   ed. Elsevier. Mardia, K.V., Kent, J.T. Bibby, J.M. (1979). Multivariate analysis.   Academic Press. Martino, C., Morton, J.T., Marotz, C.., Thompson, L.R., Tripathi, .,   Knight, R. & Zengler, K. (2019) novel sparse compositional technique   reveals microbial perturbations. mSystems 4, 1. Mountford, M. D. (1962). index similarity application   classification problems. : P.W.Murphy (ed.),   Progress Soil Zoology, 43–50. Butterworths. Veech, J. . (2013). probabilistic model analysing species   co-occurrence. Global Ecology Biogeography 22, 252–260. Wolda, H. (1981). Similarity indices, sample size   diversity. Oecologia 50, 296–302.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dissimilarity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dissimilarity between communities — ct_dissimilarity","text":"Jari Oksanen, contributions Tyler Smith (Gower index),   Michael Bedward (Raup–Crick index),   Leo Lahti (Aitchison robust Aitchison distance).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the Camtrap DP example dataset — ct_dp_example","title":"Read the Camtrap DP example dataset — ct_dp_example","text":"Reads Camtrap DP example dataset. dataset maintained versioned Camtrap DP standard.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the Camtrap DP example dataset — ct_dp_example","text":"","code":"ct_dp_example()"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the Camtrap DP example dataset — ct_dp_example","text":"Camera Trap Data Package object.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter camera trap data package — ct_dp_filter","title":"Filter camera trap data package — ct_dp_filter","text":"Subsets observations camera trap data package, retaining rows satisfy conditions.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter camera trap data package — ct_dp_filter","text":"","code":"ct_dp_filter(package, table = c(\"observations\", \"deployments\", \"media\"), ...)"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter camera trap data package — ct_dp_filter","text":"package Camera trap data package object, returned ct_read_dp(). table Character indicating table read - one \"observations\", \"deployments\", \"media\" ... Filtering conditions, see dplyr::filter()","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter camera trap data package — ct_dp_filter","text":"","code":"# \\donttest{ dp <- ct_dp_example() ct_dp_filter(package = dp, table = \"observation\", scientificName == \"Vulpes vulpes\", observationLevel == \"event\" ) #> A Camera Trap Data Package \"camtrap-dp-example-dataset\" with 3 tables: #> • deployments: 4 rows #> • media: 10 rows #> • observations: 1 rows #>  #> And 1 additional resource: #> • individuals #> Use `unclass()` to print the Data Package as a list.  ct_dp_filter(package = dp, table = \"deployments\",              latitude > 51.0, longitude > 5.0) #> A Camera Trap Data Package \"camtrap-dp-example-dataset\" with 3 tables: #> • deployments: 2 rows #> • media: 183 rows #> • observations: 210 rows #>  #> And 1 additional resource: #> • individuals #> Use `unclass()` to print the Data Package as a list.   ct_dp_filter(package = dp, table = \"media\",              captureMethod == \"activityDetection\", filePublic == FALSE ) #> A Camera Trap Data Package \"camtrap-dp-example-dataset\" with 3 tables: #> • deployments: 4 rows #> • media: 60 rows #> • observations: 62 rows #>  #> And 1 additional resource: #> • individuals #> Use `unclass()` to print the Data Package as a list. # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read camera trap data package — ct_dp_read","title":"Read camera trap data package — ct_dp_read","text":"Reads Camera Trap Data Package (Camtrap DP) dataset memory.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read camera trap data package — ct_dp_read","text":"","code":"ct_dp_read(file)"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read camera trap data package — ct_dp_read","text":"file Path URL datapackage.json file.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read camera trap data package — ct_dp_read","text":"Camera Trap Data Package object.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_read.html","id":"assign-taxonomic-information","dir":"Reference","previous_headings":"","what":"Assign taxonomic information","title":"Read camera trap data package — ct_dp_read","text":"Camtrap DP metadata taxonomic property can contain extra information scientificName found observations. information can include higher taxonomy (family, order, etc.) vernacular names multiple languages. function automatically include taxonomic information observations, extra columns starting taxon..","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_read.html","id":"assign-eventids","dir":"Reference","previous_headings":"","what":"Assign eventIDs","title":"Read camera trap data package — ct_dp_read","text":"Observations can contain two classifications two levels: Media-based observations (observationLevel = \"media\") based single media file directly linked via mediaID. Event-based observations (observationLevel = \"event\") based event, defined combination eventID, eventStart eventEnd. event can consist one media files, directly linked . function automatically assign eventIDs media, using media.deploymentID = event.deploymentID eventStart <= media.timestamp <= eventEnd. Note can result media linked multiple events (thus duplicated), example events sub-events defined.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read camera trap data package — ct_dp_read","text":"","code":"# \\donttest{ file <- \"https://raw.githubusercontent.com/tdwg/camtrap-dp/1.0/example/datapackage.json\" dp <- ct_dp_read(file) # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get core tables — ct_dp_table","title":"Get core tables — ct_dp_table","text":"Acess table like observations, deployement, media data package.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get core tables — ct_dp_table","text":"","code":"ct_dp_table(   package,   table = c(\"observations\", \"deployments\", \"media\", \"events\", \"taxa\") )"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get core tables — ct_dp_table","text":"package Camera trap data package object, returned ct_read_dp(). table Character indicating table read - one \"observations\", \"deployments\", \"media\"","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get core tables — ct_dp_table","text":"tibble table specified","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get core tables — ct_dp_table","text":"","code":"# \\donttest{ dp <- ct_dp_example() ct_dp_table(dp, \"deployments\") #> # A tibble: 4 × 24 #>   deploymentID locationID locationName  latitude longitude coordinateUncertainty #>   <chr>        <chr>      <chr>            <dbl>     <dbl>                 <dbl> #> 1 00a2c20d     e254a13c   B_HS_val 2_p…     51.5      4.77                   187 #> 2 29b7d356     2df5259b   B_DL_val 5_b…     51.2      5.66                   187 #> 3 577b543a     ff1535c0   B_DL_val 3_d…     51.2      5.66                   187 #> 4 62c200a9     ce943ced   B_DM_val 4_'…     50.7      4.01                   187 #> # ℹ 18 more variables: deploymentStart <dttm>, deploymentEnd <dttm>, #> #   setupBy <chr>, cameraID <chr>, cameraModel <chr>, cameraDelay <dbl>, #> #   cameraHeight <dbl>, cameraDepth <dbl>, cameraTilt <dbl>, #> #   cameraHeading <dbl>, detectionDistance <dbl>, timestampIssues <lgl>, #> #   baitUse <lgl>, featureType <fct>, habitat <chr>, deploymentGroups <chr>, #> #   deploymentTags <chr>, deploymentComments <chr> # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Camtrap DP version Extracts the version number used by a Camera Trap Data Package object. This version number indicates what version of the Camtrap DP standard was used. — ct_dp_version","title":"Get Camtrap DP version Extracts the version number used by a Camera Trap Data Package object. This version number indicates what version of the Camtrap DP standard was used. — ct_dp_version","text":"Get Camtrap DP version Extracts version number used Camera Trap Data Package object. version number indicates version Camtrap DP standard used.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Camtrap DP version Extracts the version number used by a Camera Trap Data Package object. This version number indicates what version of the Camtrap DP standard was used. — ct_dp_version","text":"","code":"ct_dp_version(package)"},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Camtrap DP version Extracts the version number used by a Camera Trap Data Package object. This version number indicates what version of the Camtrap DP standard was used. — ct_dp_version","text":"package Camera trap data package object, returned ct_read_dp().","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Camtrap DP version Extracts the version number used by a Camera Trap Data Package object. This version number indicates what version of the Camtrap DP standard was used. — ct_dp_version","text":"Camera Trap Data Package object.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Camtrap DP version Extracts the version number used by a Camera Trap Data Package object. This version number indicates what version of the Camtrap DP standard was used. — ct_dp_version","text":"version number derived follows: version attribute, defined. version number contained x$profile, expected contain URL used Camtrap DP standard. x$profile entirety (can NULL).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_dp_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Camtrap DP version Extracts the version number used by a Camera Trap Data Package object. This version number indicates what version of the Camtrap DP standard was used. — ct_dp_version","text":"","code":"dp <- ct_dp_example() ct_dp_version(dp) #> [1] \"1.0.1\""},{"path":"https://stangandaho.github.io/ct/reference/ct_find_break.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect time gaps in a datetime series — ct_find_break","title":"Detect time gaps in a datetime series — ct_find_break","text":"Identifies breaks sequence datetime observations based specified time threshold.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_find_break.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect time gaps in a datetime series — ct_find_break","text":"","code":"ct_find_break(   data,   datetime_column,   format,   threshold = 10,   time_unit = \"hours\" )"},{"path":"https://stangandaho.github.io/ct/reference/ct_find_break.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect time gaps in a datetime series — ct_find_break","text":"data data frame containing datetime column. datetime_column datetime column. format Optional. character string specifying datetime format, passed .POSIXlt. threshold numeric value indicating minimum gap considered break (default 10). time_unit unit threshold. Supported values include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\".","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_find_break.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect time gaps in a datetime series — ct_find_break","text":"tibble columns start, end, duration showing start end break length.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_find_break.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect time gaps in a datetime series — ct_find_break","text":"","code":"library(dplyr) pene <- read.csv(ct:::table_files()[1])  set_cam <- pene %>%   dplyr::filter(camera == \"CAMERA 3\")  ct_find_break(data = pene, datetime_column = \"datetimes\", threshold = 5, time_unit = \"days\") #> # A tibble: 3 × 3 #>   start               end                 duration         #>   <dttm>              <dttm>              <drtn>           #> 1 2019-01-24 06:05:52 2023-09-20 16:15:28 1700.423333 days #> 2 2023-09-21 13:33:27 2024-03-02 22:32:10  163.374109 days #> 3 2024-03-02 22:33:06 2024-03-10 10:21:56    7.492245 days"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit activity model to time-of-day data — ct_fit_activity","title":"Fit activity model to time-of-day data — ct_fit_activity","text":"Fits kernel density radian time--day data estimates activity level distribution. Optionally: 1. bootstraps distribution, case SEs confidence limits also stored activity level PDF; 2. weights distribution; 3. truncates distribution given times.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit activity model to time-of-day data — ct_fit_activity","text":"","code":"ct_fit_activity(   time_of_day,   weights = NULL,   n_bootstrap = 1000,   bandwidth = NULL,   adjustment = 1,   sample = c(\"none\", \"data\", \"model\"),   bounds = NULL,   show = TRUE )"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit activity model to time-of-day data — ct_fit_activity","text":"time_of_day numeric vector radian time--day data weights numeric vector weights dat value. n_bootstrap Number bootstrap iterations perform. Ignored sample==\"none\" bandwidth Numeric value kernel bandwidth. NULL, calculated internally. adjustment Numeric bandwidth adjustment multiplier. sample Character string defining sampling method bootstrapping errors (see details). bounds two-element vector defining radian bounds truncate. show Logical whether show progress bar bootstrapping.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit activity model to time-of-day data — ct_fit_activity","text":"list","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_activity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit activity model to time-of-day data — ct_fit_activity","text":"bounds given (default), circular kernel distribution fitted using dvmkern. Otherwise, normal kernel distribution used, truncated values bounds, using density2. bandwidth adjustment multiplier adj provided allow exploration effect adjusting internally calculated bandwidth accuracy activity level estimates. alternative bootstrapping methods defined sample : \"none\": bootstrapping \"data\": sample data \"model\": sample fitted probability density distribution generally better sample data, sampling fitted distribution can sometimes provide sensible confidence intervals number observations small.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit activity model to time-of-day data — ct_fit_activity","text":"","code":"data(\"ctdp\") observations <- ctdp$data$observations %>%   dplyr::filter(scientificName == \"Vulpes vulpes\") %>%   # Add time of day   ct_to_radian(times = timestamp)   fit_act <- ct_fit_activity(time_of_day = observations$time_radian,                            sample = \"model\", n_bootstrap = 100)  # Access activity level estimation fit_act$activity #> # A tibble: 1 × 4 #>     act     se lower_ci upper_ci #>   <dbl>  <dbl>    <dbl>    <dbl> #> 1 0.243 0.0732    0.177    0.441"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_detmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit animal detection — ct_fit_detmodel","title":"Fit animal detection — ct_fit_detmodel","text":"Fits detection function (either point line transect) model detection radius angle.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_detmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit animal detection — ct_fit_detmodel","text":"","code":"ct_fit_detmodel(   formula,   data,   newdata = NULL,   unit = c(\"m\", \"km\", \"cm\", \"degree\", \"radian\"),   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_detmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit animal detection — ct_fit_detmodel","text":"formula formula specifying response (e.g., radius ~ 1 angle ~ covariate). data data frame containing detection observations. newdata Optional new data frame covariate values prediction. unit Unit detection variable. One \"m\", \"km\", \"cm\" distance, \"degree\", \"radian\" angle. ... Additional arguments passed Distance::ds().","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_detmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit animal detection — ct_fit_detmodel","text":"list elements: ddf detection function model object. dht abundance/density information (survey region data supplied, else NULL)","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_detmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit animal detection — ct_fit_detmodel","text":"","code":"data(\"ctdp\") observations <- ctdp$data$observations %>%   dplyr::filter(scientificName == \"Vulpes vulpes\")  ct_fit_detmodel(radius ~ 1, data = observations) #> Error in -lt$value : invalid argument to unary operator #>  #> Distance sampling analysis object #>  #> Summary for ds object #> Number of observations :  5  #> Distance range         :  0  -  7.226863  #> AIC                    :  22.73211  #> Optimisation           :  mrds (nlminb)  #>  #> Detection function: #>  Half-normal key function  #>  #> Detection function parameters  #> Scale coefficient(s):  #>             estimate        se #> (Intercept) 1.722192 0.6432342 #>  #>                      Estimate        SE        CV #> Average p           0.6783846 0.3138098 0.4625839 #> N in covered region 7.3704500 3.8882665 0.5275481 #> EDR                 5.9523416 1.3767287 0.2312920  # For angle ct_fit_detmodel(angle ~ 1, data = observations) #> Error in -lt$value : invalid argument to unary operator #>  #> Distance sampling analysis object #>  #> Summary for ds object #> Number of observations :  5  #> Distance range         :  0  -  0.5841587  #> AIC                    :  0.3802033  #> Optimisation           :  mrds (nlminb)  #>  #> Detection function: #>  Half-normal key function  #>  #> Detection function parameters  #> Scale coefficient(s):  #>              estimate        se #> (Intercept) -1.606023 0.1353736 #>  #>                      Estimate          SE        CV #> Average p            0.232632  0.05906989 0.2539199 #> N in covered region 21.493176 10.03408954 0.4668500 #> EDR                  0.281751  0.03577110 0.1269600"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit detection functions and estimate density/abundance — ct_fit_ds","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"ct_fit_ds fits detection functions camera trap distance sampling data estimates animal density abundance using bootstrap variance estimation. Supports single model fitting automated model selection procedures.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"","code":"ct_fit_ds(   data,   estimate = c(\"density\", \"abundance\"),   cutpoints = NULL,   truncation = set_truncation(data = data, cutpoints = cutpoints),   formula = ~1,   key = c(\"hn\", \"hr\", \"unif\"),   adjustment = c(\"cos\", \"herm\", \"poly\"),   nadj = NULL,   order = NULL,   select_model = FALSE,   model_params = list(key = list(\"hn\", \"hr\", \"unif\"), adjustment = list(\"cos\", \"herm\",     \"poly\"), nadj = list(0, 1, 2), order = NULL),   field_of_view = 42,   availability,   n_bootstrap = 100,   n_cores = 1,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"data data frame containing distance sampling observations. Must include columns distance measurements can include covariates detection function modeling. See Distance::flatfile details. estimate Character string specifying parameter estimate. Either \"density\" (animals per km^2) \"abundance\" (total number animals). Default \"density\". cutpoints data binned, vector gives cutpoints bins. Supplying distance column data specifying cutpoints recommended approach standard binned analyses. Ensure first element 0 (left truncation distance) last distance end furthest bin. (Default NULL, binning.) provided distbegin distend columns data (note used cutpoints constant across data, e.g. planes flying differing altitudes) specify cutpoints argument cause distbegin distend columns data overwritten. truncation either truncation distance (numeric, e.g. 5) percentage (string, e.g. \"15%\"). Can supplied list elements left right left truncation required (e.g.  list(left=1,right=20) list(left=\"1%\",right=\"15%\") even list(left=\"1\",right=\"15%\")).  default exact distances maximum observed distance used right truncation. data binned, right truncation largest bin end point. Default left truncation set zero. formula formula scale parameter. CDS analysis leave default ~1. key key function use; \"hn\" gives half-normal (default), \"hr\" gives hazard-rate \"unif\" gives uniform. Note uniform key used, covariates included model. adjustment adjustment terms use; \"cos\" gives cosine (default), \"herm\" gives Hermite polynomial \"poly\" gives simple polynomial. value NULL indicates adjustments fitted. nadj number adjustment terms fit. absence covariates formula, default value (NULL) select via AIC (using sequential forward selection algorithm) max.adjustment adjustments (unless order specified). covariates present model formula, default value NULL results adjustment terms fitted model. non-negative integer value cause specified number adjustments fitted. Supplying integer value allow use adjustment terms addition specifying covariates model. order adjustment terms used depend keyand adjustment. key=\"unif\", adjustments order 1, 2, 3, ... fitted adjustment = \"cos\" order 2, 4, 6, ... otherwise. key=\"hn\" \"hr\" adjustments order 2, 3, 4, ... fitted adjustment = \"cos\" order 4, 6, 8, ... otherwise. See Buckland et al. (2001, p. 47) details. order order adjustment terms fit. default value (NULL) results ds choosing orders use - see nadj. Otherwise scalar positive integer value can used fit single adjustment term specified order, vector positive integers fit multiple adjustment terms specified orders. simple Hermite polynomial adjustments, even orders allowed. number adjustment terms specified must match nadj (nadj can default NULL value). select_model Logical. TRUE, performs automated model selection using procedure Howe et al. (2019). FALSE (default), fits single model specified parameters. TRUE, model_param defines candidate model set. model_params Named list defining candidate models selection select_model = TRUE. Elements can include: key - List key functions test adjustment - List adjustment types nadj - List adjustment term numbers order - List vector adjustment orders (must match nadj) field_of_view Numeric. Camera field view angle degrees. Default 42 deg, ued calculate sampling fraction. availability list containing availability rate corrections (output ct_availability()). Must include elements availability rate (0-1) /standard error availability rate n_bootstrap Integer. Number bootstrap replicates variance estimation density/abundance. Default 100. Larger values provide precise confidence intervals increase computation time. n_cores Integer. Number CPU cores use parallel bootstrap computation. Default 1. ... Arguments passed Distance::ds scale scale distances adjustment terms divided. Defaults \"width\", scaling truncation distance. key uniform \"width\" used. option \"scale\": scale parameter detection dht_group density abundance estimates consider groups size 1 (abundance groups) dht_group=TRUE abundance individuals (group size taken account), dht_group=FALSE. Default FALSE (abundance individuals calculated). monotonicity detection function constrained monotonicity weakly (\"weak\"), strictly (\"strict\") (\"none\" FALSE). See Monotonicity, . (Default \"strict\"). default models without covariates detection function, covariates present. method optimization method use (method usable optim optimx). Defaults \"nlminb\". mono_method optimization method use monotonicity enforced. Can either slsqp solnp. Defaults slsqp. initial_values list named starting values, see mrds_opt. allowed AIC term selection used. max_adjustments maximum number adjustments try (default 5) used order=NULL. er_method encounter rate variance calculation: default = 2 gives method Innes et al, using expected counts encounter rate. Setting 1 gives observed counts (matches Distance Windows) 0 uses binomial variance (useful rare situation study area = surveyed area). See dht.se details. dht_se uncertainty calculated using dht? Safe leave TRUE, used bootdht. optimizer default set ''. case R optimizer used present MCDS optimizer also used. result best likelihood value selected. run specified optimizer set value either 'R' 'MCDS'. See mcds_dot_exe setup instructions. winebin trying use MCDS.exe optimizer non-windows system may need specify winebin. Please see mcds_dot_exe details.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"named list containing: list containing: QAIC: (select_model = TRUE) QAIC comparison table. Chi2: (select_model = TRUE) Chi-squared goodness--fit comparison. best_model: best fitted detection function model selected. rho: Estimated effective detection radius (meters). density abundance: tibble density abundance estimates containing: median, mean, se: standard error, lcl: lower confidence limit, ucl: upper confidence limit","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"truncation","dir":"Reference","previous_headings":"","what":"Truncation","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"right truncation point default set largest observed distance bin end point. default appropriate data can often cause model convergence failures. recommended one plots histogram observed distances prior model fitting get feel appropriate truncation distance. (Similar arguments go left truncation, appropriate). Buckland et al (2001) provide guidelines truncation. specified percentage, largest right smallest left percent distances discarded. Percentages supplied using binned data. left truncation, two options: (1) fit detection function truncated data (happens set left).  assume g(x)=1 truncation point. (2) manually remove data distances less left truncation distance – effectively move centre line truncation distance (needs done calling ds). assumes detection certain left truncation distance. former strategy weaker assumption, give higher variance detection function close line data tell fit – relying data left truncation point assumed shape detection function. latter appropriate case aerial surveys, area plane visible observers, probability detection certain smallest distance.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"monotonicity","dir":"Reference","previous_headings":"","what":"Monotonicity","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"adjustment terms used, possible detection function always decrease increasing distance. unrealistic can lead bias. avoid , detection function can constrained monotonicity (default detection functions without covariates). Monotonicity constraints supported similar way described Buckland et al (2001). 20 equally spaced points range detection function (left right truncation) evaluated round optimisation function constrained either always less value zero (\"weak\") value less equal previous point (monotonically decreasing; \"strict\"). See also check.mono. Even monotonicity constraints, checks still made detection function monotonic, see check.mono.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data format","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"One can supply data simply fit detection function. However, abundance/density estimates necessary information required. Either region_table, sample_table obs_table data.frames can supplied data can supplied \"flat file\" data argument. format row data additional information ordinarily tables. usually means additional columns named: Sample.Label, Region.Label, Effort Area observation. See flatfile example.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"clusters-groups","dir":"Reference","previous_headings":"","what":"Clusters/groups","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"Note data contains column named size, cluster size estimated density/abundance based clustered analysis data. Setting column NULL perform non-clustered analysis (example \"size\" means something else dataset).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"Buckland, S.T., Anderson, D.R., Burnham, K.P., Laake, J.L., Borchers, D.L., Thomas, L. (2001). Distance Sampling. Oxford University Press. Oxford, UK. Howe, E. J., Buckland, S. T., Després-Einspenner, M., & Kühl, H. S. (2017). Distance sampling camera traps. Methods Ecology Evolution, 8(11), 1558-1565. doi:10.1111/2041-210X.12790 Howe, E. J., Buckland, S. T., Després‐Einspenner, M., & Kühl, H. S. (2019). Model selection overdispersed distance sampling data. Methods Ecology Evolution, 10(1), 38–47.  doi:10.1111/2041-210X.13082 Rowcliffe, J. M., Kays, R., Kranstauber, B., Carbone, C., & Jansen, P. . (2014). Quantifying levels animal activity using camera trap data. Methods Ecology Evolution, 5(11), 1170–1179.  doi:10.1111/2041-210X.12278","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit detection functions and estimate density/abundance — ct_fit_ds","text":"","code":"if (FALSE) { # \\dontrun{ data(\"duikers\")  # Calculates animal availability adjustment factor trigger_events <- duikers$VideoStartTimesFullDays avail <- ct_availability(times = trigger_events$time,                          format = \"%H:%M\", n_bootstrap = 100)  # Estimate density, building multiple models flat_data <- duikers$DaytimeDistances %>%   dplyr::slice_sample(prop = .2) # sample 20% of rows  duiker_density <- ct_fit_ds(data = flat_data,                             estimate = \"density\",                             select_model = TRUE,                             model_params = list(key = list(\"hn\", \"hr\"),                                                 adjustment = list(\"cos\"),                                                 nadj = list(2, 3),                                                 order = NULL),                             availability = avail,                             truncation = list(left = 2, right = 15),                             field_of_view = 42,                             n_bootstrap = 2,                             cutpoints = c(seq(2, 8, 1), 10, 12, 15) )  # View density duiker_density$density } # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_rem.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Random Encounter Model (REM) — ct_fit_rem","title":"Fit Random Encounter Model (REM) — ct_fit_rem","text":"Fits random encounter model using observed data trap rate information. Automatically estimates detection radius, detection angle, animal speed, activity pattern models provided.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_rem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Random Encounter Model (REM) — ct_fit_rem","text":"","code":"ct_fit_rem(   data,   traprate_data,   radius_model = NULL,   angle_model = NULL,   speed_model = NULL,   activity_model = NULL,   strata = NULL,   time_of_day,   n_bootstrap = 1000 )"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_rem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Random Encounter Model (REM) — ct_fit_rem","text":"data data frame observations, including distance, angle, speed, time--day (radians). traprate_data data frame created ct_traprate_data(). radius_model Optional. detection function model radius (distance) fitted using ct_fit_detmodel(). angle_model Optional. detection function model angle fitted using ct_fit_detmodel(). speed_model Optional. model movement speed fitted using ct_fit_speedmodel(). activity_model Optional. activity model fitted activity::fitact(). strata Optional. data frame stratification information columns stratumID area. time_of_day column name (unquoted string) representing time--day radians. n_bootstrap Number bootstrap replicates uncertainty estimation. Default 1000.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_rem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Random Encounter Model (REM) — ct_fit_rem","text":"data frame columns: parameters: Model parameter name estimate: Estimated value se: Standard error cv: Coefficient variation lower_ci: Lower bound 95% confidence interval upper_ci: Upper bound 95% confidence interval","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_rem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Random Encounter Model (REM) — ct_fit_rem","text":"","code":"# \\donttest{ data(\"ctdp\") deployments <- ctdp$data$deployments observations <- ctdp$data$observations %>%   dplyr::filter(scientificName == \"Vulpes vulpes\") %>%   # Add time of day   dplyr::mutate(time_of_day = ct_to_radian(times = timestamp))  # Prepare trap rate data trap_rate <- ct_traprate_data(observation_data = observations,                               deployment_data = deployments,                               deployment_column = deploymentID,                               datetime_column = timestamp,                               start = start, end = 'end' )   # Fit REM ct_fit_rem(data = observations,            traprate_data = trap_rate,            time_of_day = time_of_day) #> ℹ Fitting radius model #> ✔ Fitting radius model ... done #>  #> ℹ Fitting angle model #> ✔ Fitting angle model ... done #>  #> ℹ Fitting speed model #> ✔ Fitting speed model ... done #>  #> ℹ Fitting activity model #> ✔ Fitting activity model ... done #>  #> ℹ Calculating density #> ✔ Calculating density ... done #>  #>  #> # A tibble: 7 × 8 #>   parameters     estimate     se    cv lower_ci upper_ci     n unit    #>   <chr>             <dbl>  <dbl> <dbl>    <dbl>    <dbl> <int> <chr>   #> 1 radius            4.18   0.886 0.212    2.44     5.91      4 m       #> 2 angle            44.4   11.3   0.254    0.39     1.16      5 degree  #> 3 active_speed      3.08   0.765 0.248    0.439    1.27      4 km/hour #> 4 activity_level    0.243  0.077 0.316    0.093    0.393    15 none    #> 5 overall_speed    17.9    7.21  0.402    0.044    0.371    NA km/day  #> 6 trap_rate         0.441  0.119 0.271    0.239    0.635     3 n/day   #> 7 density           6.66   3.55  0.533    2.50    17.8      NA n/km2   # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_speedmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit animal speed model — ct_fit_speedmodel","title":"Fit animal speed model — ct_fit_speedmodel","text":"Fits statistical model estimate average movement speed animals. Used REM density estimation.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_speedmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit animal speed model — ct_fit_speedmodel","text":"","code":"ct_fit_speedmodel(   formula = speed ~ 1,   data,   newdata = NULL,   distance_unit = c(\"m\", \"km\", \"cm\"),   time_unit = c(\"second\", \"minute\", \"hour\", \"day\"),   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_speedmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit animal speed model — ct_fit_speedmodel","text":"formula formula indicating speed modeled (e.g., speed ~ 1). data data frame containing speed observations. newdata Optional new data use prediction. distance_unit Unit distance. One \"m\", \"km\", \"cm\". time_unit Unit time. One \"second\", \"minute\", \"hour\", \"day\". ... Additional arguments passed sbd::sbm().","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_speedmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit animal speed model — ct_fit_speedmodel","text":"object class sbm, additional unit attribute indicating speed unit.","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_fit_speedmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit animal speed model — ct_fit_speedmodel","text":"","code":"data(\"ctdp\") observations <- ctdp$data$observations %>%   dplyr::filter(scientificName == \"Vulpes vulpes\")  ct_fit_speedmodel(speed ~ 1, data = observations) #> Call: #> speed ~ 1 #>  #> Probability distribution: #> none #>  #> Estimates: #>         est        se       lcl     ucl #> 1 0.8553514 0.2123973 0.4390527 1.27165"},{"path":"https://stangandaho.github.io/ct/reference/ct_get_effort.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate camera trap deployment effort — ct_get_effort","title":"Calculate camera trap deployment effort — ct_get_effort","text":"Computes monitoring effort (e.g., days) camera deployment based start end timestamps.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_effort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate camera trap deployment effort — ct_get_effort","text":"","code":"ct_get_effort(   deployment_data,   start_column,   end_column,   deployment_column,   format = \"%Y-%m-%d %H:%M:%OS\",   time_zone = \"\",   time_unit = \"days\" )"},{"path":"https://stangandaho.github.io/ct/reference/ct_get_effort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate camera trap deployment effort — ct_get_effort","text":"deployment_data data frame containing camera trap deployment records. start_column column name (unquoted string) indicating deployment start datetime. end_column column name (unquoted string) indicating deployment end datetime. deployment_column column name (unquoted string) uniquely identifies deployment (e.g., camera ID). format character string specifying format datetime columns. Default \"%Y-%m-%d %H:%M:%OS\". time_zone time zone used parse datetime columns. Default \"\" (.e., system time zone). time_unit unit compute effort duration. Can \"secs\", \"mins\", \"hours\", \"days\", \"weeks\". Default \"days\".","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_effort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate camera trap deployment effort — ct_get_effort","text":"data frame columns: deployment_column: Deployment identifier effort: Numeric value monitoring effort effort_unit: time unit used","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_get_effort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate camera trap deployment effort — ct_get_effort","text":"","code":"data(\"ctdp\") deployments <- ctdp$data$deployments ct_get_effort(deployment_data = deployments,               deployment_column = deploymentID,               start_column = start,               end_column = end) #> # A tibble: 4 × 3 #>   deploymentID                         effort effort_unit #>   <chr>                                 <dbl> <chr>       #> 1 0d620d0e-5da8-42e6-bcf2-56c11fb3d08e  10.0  days        #> 2 6c920a31-cf07-496f-aa4f-846a428f450a   6.76 days        #> 3 c95a566f-e75e-4e7b-a905-0479c8770da3   4.55 days        #> 4 d6d42e25-be43-4820-909d-708e42219a86  12.6  days"},{"path":"https://stangandaho.github.io/ct/reference/ct_get_hs.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve hierarchical subject values from image metadata — ct_get_hs","title":"Retrieve hierarchical subject values from image metadata — ct_get_hs","text":"function retrieves values Hierarchical Subject field image's metadata. uses exiftool read metadata processes results extract return unique hierarchical subjects.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_hs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve hierarchical subject values from image metadata — ct_get_hs","text":"","code":"ct_get_hs(path)"},{"path":"https://stangandaho.github.io/ct/reference/ct_get_hs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve hierarchical subject values from image metadata — ct_get_hs","text":"path character vector specifying full path image file.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_hs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve hierarchical subject values from image metadata — ct_get_hs","text":"character vector unique hierarchical subjects exist, otherwise NULL.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_hs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve hierarchical subject values from image metadata — ct_get_hs","text":"","code":"# Image path image_path <- file.path(system.file(\"img\", package = \"ct\"), \"large.jpeg\")  # Get Hierarchical Subject from the image ct_get_hs(path = image_path) #> [1] \"Species|Vulture\""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract image metadata — ct_get_metadata","title":"Extract image metadata — ct_get_metadata","text":"function extracts metadata image files located specified path. function can handle individual image files directories containing multiple images. uses exiftool utility read metadata can optionally save extracted metadata CSV file.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract image metadata — ct_get_metadata","text":"","code":"ct_get_metadata(path, recursive = FALSE, save_file = FALSE, file_name = \"\")"},{"path":"https://stangandaho.github.io/ct/reference/ct_get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract image metadata — ct_get_metadata","text":"path character vector full path names. Either directory path file path. path specified directory, function looks image (.jpeg/JPEG, jpg/JPG) inside extract tags bind single data.frame. recursive logical. listing recurse directories? applied path directory. save_file logical. Extracted metadata write disk? file_name character specifying name file save csv format. left empty save_file TRUE, default name metadata.csv. Note file saved save_file FALSE, even file name provided.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract image metadata — ct_get_metadata","text":"data.frame","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract image metadata — ct_get_metadata","text":"","code":"# Image path image_path <- file.path(system.file(\"img\", package = \"ct\"), \"large.jpeg\")  # Extract metadata from the downloaded image metadata <- ct_get_metadata(path = image_path)  # Extract metadata from all images in a directory (non-recursive) file.copy(image_path, file.path(dirname(image_path), \"large2.jpeg\")) #> [1] TRUE metadata_dir <- ct_get_metadata(path = dirname(image_path), recursive = FALSE) #> Processing image large.jpeg (1 of 2) #> Processing image large2.jpeg (2 of 2)  unlink(file.path(dirname(image_path), \"large2.jpeg\"))"},{"path":"https://stangandaho.github.io/ct/reference/ct_independence.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate independent detections — ct_independence","title":"Evaluate independent detections — ct_independence","text":"Filters camera trap data ensure temporal independence detections, removing consecutive entry species location within specified time window.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_independence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate independent detections — ct_independence","text":"","code":"ct_independence(   data = NULL,   species_column,   site_column,   datetime,   format,   threshold = 30 * 60,   only = FALSE )"},{"path":"https://stangandaho.github.io/ct/reference/ct_independence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate independent detections — ct_independence","text":"data data.frame, tbl_df, tbl containing event data. include column datetime values. NULL, function use datetime argument instead data argument. species_column optional column name specifying species grouping. provided, independence assessed separately within species group. site_column optional column name specifying site/camera grouping. provided, independence assessed separately within site group. datetime character string specifying name column data contains datetime values. argument required data provided. format character string defining format used parse datetime values datetime column. threshold numeric value representing time difference threshold (seconds) determine whether events independent. Events considered independent time difference greater equal threshold. default 30 minutes (1800 seconds). logical value indicating whether return rows data identified independent events. TRUE, independent events returned. FALSE, entire data frame returned additional column indicating independence status. default TRUE.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_independence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate independent detections — ct_independence","text":"data provided TRUE, tibble events identified independent. data provided FALSE, tibble original data additional columns indicating independent status deltatime differences (second). data provided, tibble deltatime values independent status.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_independence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate independent detections — ct_independence","text":"Following Ridout & Linkie (2009), consecutive photos species location within 30 minutes considered non-independent removed. approach mirrors methodology applied Linkie & Ridout (2011) Sumatran tiger-prey interactions study Ahmad et al. (2024) calculate activity levels filtering essential : Avoiding autocorrelation activity pattern data Ensuring record represents independent observation Creating random sample underlying activity distribution filtered data can used estimate probability density functions daily activity patterns, assuming animals equally detectable active periods.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_independence.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate independent detections — ct_independence","text":"Ridout, M.S., & Linkie, M. (2009). Estimating overlap daily activity patterns camera trap data. Journal Agricultural, Biological, Environmental Statistics, 14(3), 322-337. doi:10.1198/jabes.2009.08038 Linkie, M., & Ridout, M.S. (2011). Assessing tiger-prey interactions Sumatran rainforests. Journal Zoology, 284(3), 224-229.doi:10.1111/j.1469-7998.2011.00801.x Ahmad, F., Mori, T., Rehan, M., Bosso, L., & Kabir, M. (2024). Applying Random Encounter Model Estimate Asiatic Black Bear (Ursus thibetanus) Density Camera Traps Hindu Raj Mountains, Pakistan. Biology, 13(5), 341. doi:10.3390/biology13050341","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_independence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate independent detections — ct_independence","text":"","code":"library(dplyr)  # Load example dataset cam_data <- read.csv(system.file(\"penessoulou_season1.csv\", package = \"ct\"))  # Independence without considering species occurrence indep1 <- cam_data %>%   ct_independence(data = ., datetime = datetimes, format = \"%Y-%m-%d %H:%M:%S\",                   only = TRUE)  sprintf(\"Independent observations: %s\", nrow(indep1)) #> [1] \"Independent observations: 177\"  # Independence considering species occurrence indep2 <- cam_data %>%   ct_independence(data = ., datetime = datetimes, format = \"%Y-%m-%d %H:%M:%S\",                   only = TRUE, species_column = \"species\")  sprintf(\"Independent observations: %s\", nrow(indep2)) #> [1] \"Independent observations: 183\"  # Use a standalone vector of datetime values dtime <- cam_data$datetimes ct_independence(datetime = dtime, format = \"%Y-%m-%d %H:%M:%S\", only = TRUE) #> # A tibble: 177 × 1 #>    datetime            #>    <dttm>              #>  1 2019-01-20 15:24:41 #>  2 2019-01-21 15:23:38 #>  3 2019-01-23 15:35:20 #>  4 2019-01-24 06:01:07 #>  5 2023-09-20 16:15:28 #>  6 2023-09-21 13:32:45 #>  7 2024-03-02 22:32:10 #>  8 2024-03-10 10:21:56 #>  9 2024-03-10 15:04:38 #> 10 2024-03-10 17:28:11 #> # ℹ 167 more rows"},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates of coefficient of overlapping — ct_overlap_estimates","title":"Estimates of coefficient of overlapping — ct_overlap_estimates","text":"Estimates coefficient overlapping","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates of coefficient of overlapping — ct_overlap_estimates","text":"","code":"ct_overlap_estimates(   A,   B,   kmax = 3,   adjust = c(0.8, 1, 4),   n_grid = 128,   type = c(\"all\", \"Dhat1\", \"Dhat4\", \"Dhat5\") )"},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates of coefficient of overlapping — ct_overlap_estimates","text":"numeric vector time--day observations (radians) species . B numeric vector time--day observations (radians) species B. kmax integer indicating maximum number modes allowed activity pattern. Default 3. adjust numeric value adjust bandwidth kernel density estimation. Default 1. n_grid integer specifying number grid points density estimation. Default 128. type name estimator use: Dhat4 recommended samples larger 50, otherwise use Dhat1. See Details. default \"\" compatibility older versions.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_estimates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimates of coefficient of overlapping — ct_overlap_estimates","text":"See overlapTrue meaning coefficient overlapping, \\(\\Delta\\). estimators \\(\\Delta\\) use kernel density estimates fitted data approximate true density functions f(t) g(t). Schmid & Schmidt (2006) propose five estimators overlap: Dhat1 calculated vectors densities estimated T equally-spaced times, t, 0 \\(2\\pi\\):  circular distributions, Dhat2 equivalent Dhat1, Dhat3 inapplicable. Dhat4 Dhat5 use vectors densities estimated times observations species, x y:  n, m sample sizes indicator function (1 condition true, 0 otherwise). Dhat5 simply checks curve higher point; even tiny changes data can result large, discontinuous changes Dhat5, can take values > 1. use Dhat5. Comparing curves times actual observations works well enough observations species. Simulations show Dhat4 best smallest sample least 50 observations. Dhat1 compares curves n.grid equally spaced points, best small samples.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates of coefficient of overlapping — ct_overlap_estimates","text":"","code":"set.seed(42) species_A <- runif(100, 1.2, 2 * pi) species_B <- runif(100, 0.23, 2 * pi) ct_overlap_estimates(species_A, species_B) #>     Dhat1     Dhat4     Dhat5  #> 0.8579292 0.8573376 0.8400000  ct_overlap_estimates(species_A, species_B, type = \"Dhat4\") #>     Dhat4  #> 0.8573376"},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","title":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","text":"function calculates pairwise overlap coefficients activity patterns multiple species using time data.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","text":"","code":"ct_overlap_matrix(   data,   species_column,   time_column,   convert_time = F,   format = \"%H:%M:%S\",   fill_na = NULL,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","text":"data data.frame tibble containing species time information. species_column column data indicating species names. time_column column data containing time data (either radians time format converted). convert_time Logical. TRUE, time data converted radians using ct_to_radian function. format character string specifying time format (e.g., \"%H:%M:%S\") ct_to_radian() TRUE. Defaults \"%H:%M:%S\". fill_na Optional. numeric value used fill NA values overlap coefficient matrix. Defaults NULL (fill NA values). ... Additional arguments passed overlap::overlapEst()` overlap estimation.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","text":"square matrix pairwise overlap coefficients, rows columns represent species.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","text":"function calculates pairwise overlap coefficients species dataset. overlap coefficients estimated using overlap package: species pairs sample sizes least 50 observations , Dhat4 estimator used. smaller sample sizes, Dhat1 estimator used (Schmid & Schmidt, 2006).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","text":"Schmid & Schmidt (2006) Nonparametric estimation coefficient overlapping - theory empirical application, Computational Statistics Data Analysis, 50:1583-1596.","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_overlap_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate overlap coefficients for multiple species — ct_overlap_matrix","text":"","code":"# Example dataset data <- data.frame(   species = c(\"SpeciesA\", \"SpeciesA\", \"SpeciesB\", \"SpeciesB\"),   time = c(\"10:30:00\", \"11:45:00\", \"22:15:00\", \"23:30:00\") )  # Calculate overlap coefficients with time conversion overlap_matrix <- ct_overlap_matrix(   data = data,   species_column = species,   time_column = time,   convert_time = TRUE,   format = \"%H:%M:%S\" )  # Fill missing values in the matrix with 0 overlap_matrix_filled <- ct_overlap_matrix(   data = data,   species_column = species,   time_column = time,   convert_time = TRUE,   fill_na = 0 )"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_camtrap_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot camera trap activity over time — ct_plot_camtrap_activity","title":"Plot camera trap activity over time — ct_plot_camtrap_activity","text":"Visualizes activity history camera trap deployments show periods data capture. also optionally highlights periods inactivity (break/gap).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_camtrap_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot camera trap activity over time — ct_plot_camtrap_activity","text":"","code":"ct_plot_camtrap_activity(   data,   deployment_column,   datetime_column,   threshold = 5,   time_unit = \"days\",   format = NULL,   activity_style = list(width = 0.8, color = \"steelblue\", alpha = 0.7, linetype = 1),   break_style = list(width = 0.8, color = \"#c90026\", alpha = 0.9, linetype = 1),   show_gaps = TRUE,   ylabel_format = \"%Y-%m-%d\",   ybreak = paste(1, time_unit) )"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_camtrap_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot camera trap activity over time — ct_plot_camtrap_activity","text":"data data frame containing datetime column. deployment_column Column name (unquoted) identifies deployment camera ID. datetime_column datetime column. threshold numeric value indicating minimum gap considered break (default 10). time_unit unit threshold. Supported values include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\". format Optional. character string specifying datetime format, passed .POSIXlt. activity_style list controlling appearance active periods. Can include: linewidth: Line width (default 0.8) color: Color activity bars (default \"steelblue\") alpha: Transparency (default 0.7) linetype: Line type (default 1) break_style list controlling appearance gaps/inactive periods. Can include: linewidth: Line width (default 0.8) color: Color gap bars (default \"#c90026\") alpha: Transparency (default 0.9) linetype: Line type (default 1) show_gaps Logical. TRUE (default), shows vertical bars detected gaps deployment activity. ylabel_format Character. Format y-axis date-time labels. Default \"%Y-%m-%d\". ybreak Character. Spacing y-axis breaks, e.g., \"1 days\" \"12 hours\". Default based time_unit.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_camtrap_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot camera trap activity over time — ct_plot_camtrap_activity","text":"ggplot2 object showing periods activity (optionally gaps) deployment.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_camtrap_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot camera trap activity over time — ct_plot_camtrap_activity","text":"","code":"# Load example data and filter for one project camtrap_data <- read.csv(ct:::table_files()[1]) %>%   dplyr::filter(project == \"Last\")  # Plot with default styles ct_plot_camtrap_activity(   data = camtrap_data,   deployment_column = camera,   datetime_column = datetimes,   threshold = 7,   time_unit = \"days\" )   #' # Customize plot appearance ct_plot_camtrap_activity(   data = camtrap_data,   deployment_column = camera,   datetime_column = \"datetimes\",   threshold = 15,   time_unit = \"days\",   ybreak = \"3 days\",   activity_style = list(width = 1.1, color = \"gray10\") )+   ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))  #'"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot species' activity patterns — ct_plot_density","title":"Plot species' activity patterns — ct_plot_density","text":"function visualizes species' activity patterns based time--day data. uses kernel density estimation estimate activity density.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot species' activity patterns — ct_plot_density","text":"","code":"ct_plot_density(   time,   xscale = 24,   xcenter = c(\"noon\", \"midnight\"),   n_grid = 128,   kmax = 3,   adjust = 1,   rug = FALSE,   linetype = 2,   linecol = \"gray10\",   linewidth = 1,   rug_lentgh = 0.018,   rug_color = \"gray30\",   extend = \"lightgrey\",   extend_alpha = 0.8,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot species' activity patterns — ct_plot_density","text":"time numeric vector time--day observations (radians, 0 \\(2\\pi\\)). xscale numeric value scale x-axis. Default 24 representing time hours. xcenter string indicating center x-axis. Options \"noon\" (default) \"midnight\". n_grid integer specifying number grid points density estimation. Default 128. kmax integer indicating maximum number modes allowed activity pattern. Default 3. adjust numeric value adjust bandwidth kernel density estimation. Default 1. rug logical value indicating whether include rug plot observations. Default FALSE. linetype numeric specifying line types. Default c(1, 2). linecol string specifying colors density lines species B. Default c(\"gray10\", \"gray0\"). linewidth numeric value specifying line widths species B density lines. Default c(1, 1). rug_lentgh numeric value specifying length rug ticks. Default 0.018 (normalized plot coordinates). rug_color string specifying color rug ticks. Default \"gray30\". extend string specifying color extended area beyond activity period. Default \"lightgrey\". extend_alpha numeric value (0 1) transparency extended area. Default 0.8. ... Additional arguments passed geom_rug function.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot species' activity patterns — ct_plot_density","text":"ggplot object representing activity density curves species.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot species' activity patterns — ct_plot_density","text":"","code":"# Generate random data for two species  set.seed(42)  A <- runif(100, 0, 2 * pi)   # Plot overlap with default settings  ct_plot_density(A) #> Error in ct_plot_density(A): object 'A' not found  # Customize plot with specific colors and line types  ct_plot_density(A, linecol = \"gray10\", linewidth = 0.8,                  xcenter = \"midnight\", rug = TRUE,                  rug_color = 'red', extend_alpha = 0) #> Error in ct_plot_density(A, linecol = \"gray10\", linewidth = 0.8, xcenter = \"midnight\",     rug = TRUE, rug_color = \"red\", extend_alpha = 0): object 'A' not found"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot overlap between two species' activity patterns — ct_plot_overlap","title":"Plot overlap between two species' activity patterns — ct_plot_overlap","text":"function visualizes temporal overlap two species' activity patterns based time--day data. uses kernel density estimation estimate activity densities highlights areas overlap two species.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot overlap between two species' activity patterns — ct_plot_overlap","text":"","code":"ct_plot_overlap(   A,   B,   xscale = 24,   xcenter = c(\"noon\", \"midnight\"),   n_grid = 128,   kmax = 3,   adjust = 1,   rug = FALSE,   overlap_color = \"gray40\",   overlap_alpha = 0.8,   linetype = c(1, 2),   linecol = c(\"gray10\", \"gray0\"),   linewidth = c(1, 1),   overlap_only = FALSE,   rug_lentgh = 0.018,   rug_color = \"gray30\",   extend = \"lightgrey\",   extend_alpha = 0.8,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot overlap between two species' activity patterns — ct_plot_overlap","text":"numeric vector time--day observations (radians) species . B numeric vector time--day observations (radians) species B. xscale numeric value scale x-axis. Default 24 representing time hours. xcenter string indicating center x-axis. Options \"noon\" (default) \"midnight\". n_grid integer specifying number grid points density estimation. Default 128. kmax integer indicating maximum number modes allowed activity pattern. Default 3. adjust numeric value adjust bandwidth kernel density estimation. Default 1. rug logical value indicating whether include rug plot observations. Default FALSE. overlap_color string specifying color overlap area. Default \"gray40\". overlap_alpha numeric value (0 1) transparency overlap area. Default 0.8. linetype vector integers specifying line types species B density lines. Default c(1, 2). linecol vector strings specifying colors density lines species B. Default c(\"gray10\", \"gray0\"). linewidth vector numeric values specifying line widths species B density lines. Default c(1, 1). overlap_only logical value indicating whether plot overlap region without individual density lines. Default FALSE. rug_lentgh numeric value specifying length rug ticks. Default 0.018 (normalized plot coordinates). rug_color string specifying color rug ticks. Default \"gray30\". extend string specifying color extended area beyond activity period. Default \"lightgrey\". extend_alpha numeric value (0 1) transparency extended area. Default 0.8. ... Additional arguments passed geom_rug function.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot overlap between two species' activity patterns — ct_plot_overlap","text":"ggplot object representing activity density curves overlap two species. overlap_only = TRUE, overlap region displayed.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot overlap between two species' activity patterns — ct_plot_overlap","text":"function calculates kernel density estimates two sets time--day data (B) visualizes overlap. time--day data expressed radians (0 \\(2\\pi\\)). Key features plot: x-axis can scaled represent hours (default xscale = 24) units. center x-axis can adjusted \"noon\" \"midnight\". shaded polygon highlights overlap region two density curves. Optionally includes rug plot indicate raw observations. Allows customization line types, colors, widths, transparency. Extended regions (beyond primary activity period) can highlighted clarity.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot overlap between two species' activity patterns — ct_plot_overlap","text":"","code":"if (FALSE) { # \\dontrun{   # Generate random data for two species   set.seed(42)   species_A <- runif(100, 0, 2 * pi)   species_B <- runif(100, 0, 2 * pi)    # Plot overlap with default settings   ct_plot_overlap(A = species_A, B = species_B)    # Customize plot with specific colors and line types   ct_plot_overlap(A = species_A, B = species_B, overlap_color = \"blue\", linecol = c(\"red\", \"green\"))    # Include rug plots and change transparency   ct_plot_overlap(A = species_A, B = species_B, rug = TRUE, overlap_alpha = 0.5) } # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot overlap coefficient matrix — ct_plot_overlap_coef","title":"Plot overlap coefficient matrix — ct_plot_overlap_coef","text":"Visualizes overlap coefficient matrix.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot overlap coefficient matrix — ct_plot_overlap_coef","text":"","code":"ct_plot_overlap_coef(   data,   side = c(\"lower\", \"upper\"),   show = c(\"shape\", \"value\"),   shape_type = 21,   shape_size = 0.5,   text_size = 6,   text_font = NA,   excludes = NULL,   color_scale = \"gray3\",   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot overlap coefficient matrix — ct_plot_overlap_coef","text":"data square matrix (e.g ct_overlap_matrix() output) representing overlap coefficients visualized. side character string indicating triangle matrix display. Options \"lower\" (default) \"upper\". show character string specifying whether display \"shape\" (default) \"value\" plot. shape_type Numeric value specifying type shape use plot. Defaults 21 (circle). shape_size Numeric value controlling stroke size shapes. Defaults 0.5. text_size Numeric value specifying size text show = \"value\". Defaults 6. text_font Character string specifying font family use text labels. Defaults NA. excludes vector numeric values exclude plot. Defaults NULL. color_scale character string vector colors define gradient color scale. Defaults \"gray3\". ... Additional arguments passed guide_colorbar function.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot overlap coefficient matrix — ct_plot_overlap_coef","text":"ggplot object representing overlap coefficient matrix visualization.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_overlap_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot overlap coefficient matrix — ct_plot_overlap_coef","text":"","code":"library(ggplot2) # Example overlap coefficient matrix overlap_matrix <- matrix(c(1, 0.8, 0.7, 0.8, 1, 0.9, 0.7, 0.9, 1), ncol = 3) colnames(overlap_matrix) <- rownames(overlap_matrix) <- c(\"A\", \"B\", \"C\")  # Plot lower triangle with shapes ct_plot_overlap_coef(overlap_matrix, side = \"lower\", show = \"shape\")   # Plot upper triangle with values ct_plot_overlap_coef(overlap_matrix, side = \"upper\", show = \"value\")"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_rose_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a 24-hour rose diagram of daily activity — ct_plot_rose_diagram","title":"Plot a 24-hour rose diagram of daily activity — ct_plot_rose_diagram","text":"function generates rose diagram (circular bar plot) visualize daily activity patterns 24-hour period. bar represents either absolute relative frequency observations within hourly intervals. plot also includes segment indicating mean activity time, optional segment showing 95% confidence interval activity period.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_rose_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a 24-hour rose diagram of daily activity — ct_plot_rose_diagram","text":"","code":"ct_plot_rose_diagram(   data = NULL,   times,   frequencies = \"absolute\",   hide_lebels = FALSE,   label_position = NULL,   label_style = list(),   time_range = 1,   ci_segment = TRUE,   mean_segment = TRUE,   ring = TRUE,   color = \"gray20\",   fill = color,   ci_style = list(),   mean_style = list(),   start = -0.12,   width = NULL )"},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_rose_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a 24-hour rose diagram of daily activity — ct_plot_rose_diagram","text":"data data frame containing time values. NULL, times must provided vector. times numeric vector time values (radians) column name data. frequencies Character. Use \"absolute\" show counts \"relative\" show percentages. Default \"absolute\". hide_lebels Logical. TRUE, frequency value labels top bars hidden. Default FALSE. label_position Numeric. Controls vertical position frequency value labels (shown). label_style list styles labels. Accepts color, size, family. time_range Numeric. Width time bins hours. Default 1 (hourly bins). ci_segment Logical numeric. TRUE, segment representing 95% confidence interval added. numeric, value sets length CI ticks. Default TRUE. mean_segment Logical. TRUE, segment representing mean time added. Default TRUE. ring Logical numeric vector. TRUE, default ring range set. numeric vector length 2 provided, sets custom inner outer limits radial axis. color Color bar border segments. Default \"gray20\". fill Fill color bars. Default color. ci_style list styles confidence interval segment. Accepts color, linetype, linewidth. mean_style list styles mean segment. Accepts color, linetype, linewidth. start Numeric. angle (radians) polar plot starts. Default -0.12. width Numeric. Width bar. Default NULL, uses default width geom_col().","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_rose_diagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a 24-hour rose diagram of daily activity — ct_plot_rose_diagram","text":"ggplot object representing rose diagram.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_plot_rose_diagram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a 24-hour rose diagram of daily activity — ct_plot_rose_diagram","text":"","code":"set.seed(129) library(dplyr) library(ggplot2)  rf <- runif(123, 0, max = 6)  ct_plot_rose_diagram(data = NULL,                      times = rf,                      frequencies = \"relative\",                      label_style = list(size = 4, color = 'red'),                      label_position = 11,                      time_range = 1,                      mean_segment = TRUE,                      ci_segment = 1,                      ring = c(-5, 12),                      color = 'gray20',                      mean_style = list(linetype = 1, linewidth = .5, color = 'red'),                      ci_style = list(linetype = 1, linewidth = .5, color = 'black') )"},{"path":"https://stangandaho.github.io/ct/reference/ct_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a delimited file into a tibble — ct_read","title":"Read a delimited file into a tibble — ct_read","text":"ct_read function reads delimited text file. automatically detects delimiter specified provides easy--use interface importing data additional customization options.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a delimited file into a tibble — ct_read","text":"","code":"ct_read(file_path, header = TRUE, sep, ...)"},{"path":"https://stangandaho.github.io/ct/reference/ct_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a delimited file into a tibble — ct_read","text":"file_path string specifying path file read. header logical value indicating whether file contains header row. Defaults TRUE. sep field separator character. provided, function automatically detects separator. ... Additional arguments passed read.table function fine-tuned control file reading.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a delimited file into a tibble — ct_read","text":"tibble containing data specified file.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_remove_hs.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove specific or all hierarchical subject values from image metadata — ct_remove_hs","title":"Remove specific or all hierarchical subject values from image metadata — ct_remove_hs","text":"ct_remove_hs function removes specific hierarchy Hierarchical Subject field image's metadata, removes entire field specific hierarchy provided. uses exiftool manipulate metadata ensure desired changes applied.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_remove_hs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove specific or all hierarchical subject values from image metadata — ct_remove_hs","text":"","code":"ct_remove_hs(path, hierarchy = NULL, intern = TRUE, quiet = TRUE, ...)"},{"path":"https://stangandaho.github.io/ct/reference/ct_remove_hs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove specific or all hierarchical subject values from image metadata — ct_remove_hs","text":"path character vector specifying full path image file. hierarchy named character vector, e.g c(\"Species\" = \"Vulture\") specifying hierarchy removed. NULL, entire Hierarchical Subject field removed. intern TRUE output returned character vector. quiet Suppress output command . ... additional arguments passed system2()","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_remove_hs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove specific or all hierarchical subject values from image metadata — ct_remove_hs","text":"message indicating image updated","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_remove_hs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove specific or all hierarchical subject values from image metadata — ct_remove_hs","text":"","code":"# Image path image_path <- file.path(system.file(\"img\", package = \"ct\"), \"large.jpeg\")  # Get Hierarchical Subject from the image no_hs <- ct_get_hs(path = image_path) ct_create_hs(image_path, c(\"A\" = \"AB\")) #> [1]  ct_remove_hs(image_path, c(\"A\" = \"AB\")) #> [1] Hierarchy A|AB does not exist. No change applied to large.jpeg"},{"path":"https://stangandaho.github.io/ct/reference/ct_select_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for Distance Sampling detection functions — ct_select_model","title":"Model selection for Distance Sampling detection functions — ct_select_model","text":"Implements two-step model selection procedure distance sampling detection functions following approach Howe et al (2019).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_select_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for Distance Sampling detection functions — ct_select_model","text":"","code":"ct_select_model(models, chat = NULL, k = 2)"},{"path":"https://stangandaho.github.io/ct/reference/ct_select_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for Distance Sampling detection functions — ct_select_model","text":"models list fitted detection function models (objects returned Distance::ds() ct_fit_ds()). chat Optional numeric value overdispersion (\\(\\hat{c}\\)). provided, estimated parameterised model key function set. k Numeric. penalty term used QAIC (default 2).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_select_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model selection for Distance Sampling detection functions — ct_select_model","text":"named list following elements: QAIC: tibble summarizing QAIC results model within key function families. Best QAIC models: subset models, one per key function, minimize QAIC. Chiq2: tibble comparing best models chi-squared goodness--fit criteria. Final model: selected detection function model lowest chi-squared/df.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_select_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model selection for Distance Sampling detection functions — ct_select_model","text":"Step 1: Within key function family (e.g., half-normal, hazard-rate), models compared using quasi-Akaike Information Criterion (QAIC). Overdispersion (\\(\\hat{c}\\)) estimated provided. best model per key function family identified one lowest QAIC. Step 2: best models key function family compared using overall goodness--fit statistics based chi-squared divided degrees freedom (\\(\\chi^2 / df\\)). model lowest \\(\\chi^2 / df\\) selected final detection function model.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_select_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model selection for Distance Sampling detection functions — ct_select_model","text":"Howe, E. J., Buckland, S. T., Després‐Einspenner, M., & Kühl, H. S. (2019). Model selection overdispersed distance sampling data. Methods Ecology Evolution, 10(1), 38-47. doi:10.1111/2041-210X.13082","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_select_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for Distance Sampling detection functions — ct_select_model","text":"","code":"# \\donttest{ library(Distance) library(dplyr)  data(\"duiker\") duiker_data <- duikers$DaytimeDistances %>%   dplyr::slice_sample(prop = .3) # sample 30% of rows truncation <- list(left = 2, right = 15) # Keep only distance between 2-15 m  # fit hazard-rate key models w3_hr0 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = NULL,              truncation = truncation) #> Fitting hazard-rate key function #> AIC= 15168.943 w3_hr1 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = \"cos\",              order = 2, truncation = truncation) #> Fitting hazard-rate key function with cosine(2) adjustments #> AIC= 15170.943 w3_hr2 <- ds(duiker_data, transect = \"point\", key = \"hr\", adjustment = \"cos\",              order = c(2, 4), truncation = truncation) #> Fitting hazard-rate key function with cosine(2,4) adjustments #> AIC= 15172.499 # fit half-normal key models w3_hn0 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = NULL,              truncation = truncation) #> Fitting half-normal key function #> AIC= 15188.691 w3_hn1 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = \"cos\",              order = 2, truncation = truncation) #> Fitting half-normal key function with cosine(2) adjustments #> AIC= 15166.434 w3_hn2 <- ds(duiker_data, transect = \"point\", key = \"hn\", adjustment = \"cos\",              order = c(2, 4), truncation = truncation) #> Fitting half-normal key function with cosine(2,4) adjustments #> AIC= 15164.643 # fit uniform key models w3_u0 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = NULL,             truncation = truncation) #> Fitting uniform key function #> AIC= 17423.932 w3_u1 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = \"cos\",             order = 2, truncation = truncation) #> Fitting uniform key function with cosine(2) adjustments #> AIC= 17425.932 w3_u2 <- ds(duiker_data, transect = \"point\", key = \"unif\", adjustment = \"cos\",             order = c(2, 4), truncation = truncation) #> Fitting uniform key function with cosine(2,4) adjustments #> AIC= 17427.932  # Create model list model_list <- list(w3_hn0, w3_hn1, w3_hn2,                    w3_hr0, w3_hr1, w3_hr2,                    w3_u0, w3_u1, w3_u2)  # Compute model QAICs ct_QAIC(list(w3_hr0, w3_hr1, w3_hr2)) # All key functions must be the same #> # A tibble: 3 × 3 #>   model                                                    df  QAIC #>   <chr>                                                 <int> <dbl> #> 1 hazard-rate key function                                  2  52.6 #> 2 hazard-rate key function with cosine(2) adjustments       3  54.6 #> 3 hazard-rate key function with cosine(2,4) adjustments     4  56.6 ct_QAIC(list(w3_hn0, w3_hn1, w3_hn2)) # All key functions must be the same #> # A tibble: 3 × 3 #>   model                                                    df  QAIC #>   <chr>                                                 <int> <dbl> #> 1 half-normal key function                                  1  51.9 #> 2 half-normal key function with cosine(2) adjustments       2  53.8 #> 3 half-normal key function with cosine(2,4) adjustments     3  55.8  # Compute Chi-squared Goodness-of-fit ct_chi2_select(list(w3_hn0, w3_hr0, w3_u0)) # All key functions must be different #> # A tibble: 3 × 3 #>   key         model                    criteria #>   <chr>       <chr>                       <dbl> #> 1 half-normal half-normal key function     307. #> 2 hazard-rate hazard-rate key function     314. #> 3 uniform     uniform key function         450. ct_chi2_select(list(w3_hn2, w3_hr1, w3_u0)) # All key functions must be different #> # A tibble: 3 × 3 #>   key         model                                                 criteria #>   <chr>       <chr>                                                    <dbl> #> 1 half-normal half-normal key function with cosine(2,4) adjustments     317. #> 2 hazard-rate hazard-rate key function with cosine(2) adjustments       320. #> 3 uniform     uniform key function                                      450.  # Two-step model selection ct_select_model(model_list) #> $QAIC #> # A tibble: 9 × 6 #>      id key         model                                         df  QAIC best  #>   <int> <chr>       <chr>                                      <int> <dbl> <lgl> #> 1     1 half-normal half-normal key function                       1  51.9 TRUE  #> 2     2 half-normal half-normal key function with cosine(2) a…     2  53.8 FALSE #> 3     3 half-normal half-normal key function with cosine(2,4)…     3  55.8 FALSE #> 4     4 hazard-rate hazard-rate key function                       2  52.6 TRUE  #> 5     5 hazard-rate hazard-rate key function with cosine(2) a…     3  54.6 FALSE #> 6     6 hazard-rate hazard-rate key function with cosine(2,4)…     4  56.6 FALSE #> 7     7 uniform     uniform key function                           0  39.3 TRUE  #> 8     8 uniform     uniform key function with cosine(2) adjus…     1  41.3 FALSE #> 9     9 uniform     uniform key function with cosine(2,4) adj…     2  43.3 FALSE #>  #> $`Best QAIC models` #> $`Best QAIC models`[[1]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Half-normal key function  #>  #> Estimated abundance in covered region: 11540.24  #>  #> $`Best QAIC models`[[2]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Hazard-rate key function  #>  #> Estimated abundance in covered region: 8198.327  #>  #> $`Best QAIC models`[[3]] #>  #> Distance sampling analysis object #>  #> Detection function: #>  Uniform key function  #>  #> Estimated abundance in covered region: 3159.163  #>  #>  #> $Chi2 #> # A tibble: 3 × 4 #>   key         model                    criteria best  #>   <chr>       <chr>                       <dbl> <lgl> #> 1 half-normal half-normal key function     307. TRUE  #> 2 hazard-rate hazard-rate key function     314. FALSE #> 3 uniform     uniform key function         450. FALSE #>  #> $`Final model` #>  #> Distance sampling analysis object #>  #> Detection function: #>  Half-normal key function  #>  #> Estimated abundance in covered region: 11540.24  #>  # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_solartime.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","title":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","text":"function converts local time solar time based sunrise sunset times given location. Solar time timekeeping system day defined position sun sky, sunrise marking start day sunset marking end.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_solartime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","text":"","code":"ct_solartime(   data = NULL,   date,   longitude,   latitude,   crs = NULL,   format,   time_zone,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_solartime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","text":"data data frame containing date, longitude, latitude columns. NULL, function use date, longitude, latitude parameters directly. Default NULL. date vector date-time values column name data representing date-time values converted solar time. can character vector POSIXlt object. longitude numeric vector column name data representing longitude location(s). Longitude decimal degrees. latitude numeric vector column name data representing latitude location(s). Latitude decimal degrees. crs coordinate reference system (CRS) string object specifying current CRS input coordinates. provided, function transform coordinates longitude latitude (WGS84). useful input coordinates projected system (e.g., UTM). Default NULL. format character string giving date-time format used strptime(). time_zone numeric vector representing time zone offset(s) UTC (hours). data provided, match number unique locations data. ... Additional arguments passed .POSIXlt date parsing.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_solartime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","text":"tibble following columns: input: original date-time values. clock: local clock time. solar: calculated solar time. data provided, tibble also include longitude latitude columns.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_solartime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","text":"function calculates solar time first determining sunrise sunset times given location(s) date(s). uses times anchor solar time calculation. solar time computed transforming local clock time based position sun sky. data provided, function process unique location data return tibble solar time date-time value. data NULL, function process date, longitude, latitude parameters directly.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_solartime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","text":"Rowcliffe, M. (2023). activity: Animal Activity Statistics. R package version 1.3.4. https://CRAN.R-project.org/package=activity","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_solartime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform time to solar time anchored to sunrise and sunset — ct_solartime","text":"","code":"library(dplyr)  read.csv(system.file(\"penessoulou_season1.csv\", package = \"ct\")) %>%  dplyr::filter(species == \"Erythrocebus patas\") %>%  # Select independent events based on a given threshold  ct::ct_independence(species_column = species,                           datetime = datetimes, threshold = 60*5, # 5 minutes                           format = \"%Y-%m-%d %H:%M:%S\",                           only = TRUE) %>%  # Transform Time to Solar Time  ct_solartime(data = ., date = datetime, longitude = longitude, latitude = latitude,                crs = \"EPSG:32631\", time_zone = 1) #> # A tibble: 71 × 5 #>    longitude latitude datetime            clock solar #>        <dbl>    <dbl> <dttm>              <dbl> <dbl> #>  1      1.57     9.28 2024-03-17 15:14:29  3.99  3.97 #>  2      1.57     9.28 2024-03-20 11:32:33  3.02  3.00 #>  3      1.57     9.28 2024-03-21 14:34:27  3.82  3.80 #>  4      1.57     9.28 2024-03-21 14:54:21  3.90  3.89 #>  5      1.57     9.28 2024-03-22 14:23:41  3.77  3.75 #>  6      1.57     9.28 2024-03-22 14:51:09  3.89  3.88 #>  7      1.57     9.28 2024-03-25 13:38:37  3.57  3.56 #>  8      1.57     9.28 2024-03-25 13:50:19  3.62  3.61 #>  9      1.57     9.28 2024-03-28 17:06:38  4.48  4.48 #> 10      1.57     9.28 2024-03-29 11:22:19  2.98  2.97 #> # ℹ 61 more rows"},{"path":"https://stangandaho.github.io/ct/reference/ct_spatial_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate observed spatial coverage of species — ct_spatial_coverage","title":"Calculate observed spatial coverage of species — ct_spatial_coverage","text":"function calculates Observed Spatial Coverage species like Home Range, based camera trap data. term home range typically associated dynamic movement data, recorded radio-tracking GPS devices, provide continuous near-continuous tracking individual animal's movements. Since camera traps static capture presence/absence activity within specific locations, concept home range might fully apply.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_spatial_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate observed spatial coverage of species — ct_spatial_coverage","text":"","code":"ct_spatial_coverage(   data,   site_column,   size_column = NULL,   longitude,   latitude,   crs = c(4326, NULL),   study_area = NULL,   resolution,   spread_factor = 0.1 )"},{"path":"https://stangandaho.github.io/ct/reference/ct_spatial_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate observed spatial coverage of species — ct_spatial_coverage","text":"data data frame containing species occurrence records, including site, longitude, latitude, optionally size (abundance). site_column Column name specifying site identifier. size_column Optional column specifying abundance species site. Defaults NULL, case counts per site used. longitude Column name specifying longitude observation sites. latitude Column name specifying latitude observation sites. crs vector length two specifying coordinate reference systems: c(crs1, crs2). crs1 represents current CRS data (e.g., 4326 latitude/longitude). crs2 represents CRS transform (e.g., \"EPSG:32631\", UTM EPSG code) accurate distance calculations. crs2 NULL, transformation applied. Defaults c(4326, NULL) study_area optional simple feature (sf) polygon representing study area. provided, raster extends cover area. resolution Numeric value specifying spatial resolution (grid size) rasterization. spread_factor scale factor half-normal distribution. Higher values create spread-distribution, lower values make concentrated. value must ]0; 1]","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_spatial_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate observed spatial coverage of species — ct_spatial_coverage","text":"list containing: Coverage raster: raster object representing species abundance across space. Coverage stats: tibble spatial coverage statistics, including area (km²), average abundance, maximum abundance, standard deviation.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_spatial_coverage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate observed spatial coverage of species — ct_spatial_coverage","text":"function applies half-normal kernel model species abundance space, using scale rate control spread distribution: $$\\bar{K}(x) = \\frac{\\sum w * \\text{e}^{(-0.5 * (\\frac{x}{\\sigma})^2)}}{N}$$ : \\(\\bar{K}(x)\\) mean abundance kernel across sites, \\(w\\) species abundance site, \\(\\sigma\\) standard deviation spatial distance (scaled spread_factor), \\(N\\) total number sites.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_spatial_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate observed spatial coverage of species — ct_spatial_coverage","text":"","code":"library(dplyr) cam_data <- system.file(\"penessoulou_season2.csv\", package = \"ct\") %>%   read.csv() %>%   dplyr::filter(Species == \"Erythrocebus patas\")  spc <- ct_spatial_coverage(   data = cam_data,   site_column = Camera,   crs = \"EPSG:32631\", ,   resolution = 30,   spread_factor = 0.4,   size_column = Count,   longitude = Longitude,   latitude = Latitude )  ## Abundance stats spc[[2]] %>%   dplyr::select(-1) #> # A tibble: 1 × 4 #>   `Spatial coverage (km²)` `Average abundance` `Maximum abundance` #>                      <dbl>               <dbl>               <dbl> #> 1                     22.6                   7                  13 #> # ℹ 1 more variable: `Standard Deviation` <dbl>  ## Plot spatial coverage library(ggplot2) spc_vect <- terra::as.polygons(spc[[1]]) %>%   sf::st_as_sf()  ggplot() +   geom_sf(data = spc_vect, aes(fill = Abundance), color = NA) +   theme_minimal() +   scale_fill_viridis_c()"},{"path":"https://stangandaho.github.io/ct/reference/ct_stack_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack a list of data frame — ct_stack_df","title":"Stack a list of data frame — ct_stack_df","text":"function takes list data frames stacks single data frame. ensures columns input data frames list included output, filling missing columns NA values necessary.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_stack_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack a list of data frame — ct_stack_df","text":"","code":"ct_stack_df(df_list)"},{"path":"https://stangandaho.github.io/ct/reference/ct_stack_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack a list of data frame — ct_stack_df","text":"df_list list data frame stacked","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_stack_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack a list of data frame — ct_stack_df","text":"data frame","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_stack_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack a list of data frame — ct_stack_df","text":"","code":"x <- data.frame(age = 15, fruit = \"Apple\", weight = 12) y <- data.frame(age = 51, fruit = \"Tomato\") z <- data.frame(age = 26, fruit = \"Lemo\", weight = 12, height = 45) alldf <- list(x,y,z) ct_stack_df(alldf) #> # A tibble: 3 × 4 #>   height weight fruit    age #>    <dbl>  <dbl> <chr>  <dbl> #> 1     NA     12 Apple     15 #> 2     NA     NA Tomato    51 #> 3     45     12 Lemo      26"},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize community data matrix — ct_standardize","title":"Standardize community data matrix — ct_standardize","text":"function standardizes given data matrix using different methods total sum scaling, max normalization, frequency scaling, standardization, presence-absence transformation, chi-square transformation, Hellinger transformation, log transformation, others.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize community data matrix — ct_standardize","text":"","code":"ct_standardize(   data,   method,   margin,   range_global,   logbase = 2,   na.rm = FALSE,   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize community data matrix — ct_standardize","text":"data numeric matrix data frame standardized. method character string specifying standardization method (see details). Available methods : \"total\": Divides entry total sum given margin. \"max\": Divides entry maximum value given margin. \"frequency\": Frequency transformation. \"normalize\": Normalization Euclidean norm. \"range\": Standardizes range (min-max scaling). \"rank\": Converts values ranks. \"rrank\": Relative rank transformation. \"standardize\": Standardization (z-score normalization). \"pa\": Presence-absence transformation (binary). \"chi.square\": Chi-square standardization. \"hellinger\": Hellinger transformation. \"log\": Log transformation. \"clr\": Centered log-ratio transformation. \"rclr\": Robust centered log-ratio transformation. \"alr\": Additive log-ratio transformation. margin integer specifying margin standardization: 1: Rows 2: Columns range_global matrix specifying range standardization (optional, used \"range\" method). logbase base logarithmic transformation (default 2). na.rm Logical. TRUE, missing values (NA) removed calculations. ... Additional arguments passed transformation functions.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize community data matrix — ct_standardize","text":"standardized matrix tibble attributes specifying transformation applied.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize community data matrix — ct_standardize","text":"function provides following standardization methods community data: \"total\": Divides margin total (default margin = 1). \"max\": Divides margin maximum (default margin = 2). \"frequency\": Divides margin total multiplies number non-zero items, ensuring average non-zero entries one (Oksanen 1983; default margin = 2). \"normalize\": Scales data sum squares along specified margin equals one (default margin = 1). \"range\": Standardizes values range [0,1] (default margin = 2). values constant, transformed 0. \"rank\", \"rrank\": \"rank\" replaces abundance values increasing ranks, leaving zeros unchanged. \"rrank\" similar uses relative ranks maximum 1 (default margin = 1). \"standardize\": Scales x zero mean unit variance (default margin = 2). \"pa\": Converts x presence/absence scale (0/1). \"chi.square\": Divides row sums square root column sums, adjusts square root matrix total (Legendre & Gallagher 2001). used Euclidean distance, distances similar Chi-square distances correspondence analysis (default margin = 1). \"hellinger\": Computes square root method = \"total\" (Legendre & Gallagher 2001). \"log\": Logarithmic transformation suggested Anderson et al. (2006): $$\\log_b (x) + 1$$ \\(x > 0\\), \\(b\\) base logarithm. Zeros remain unchanged. Higher bases give less weight quantities presences. \"alr\": Additive log ratio (ALR) transformation (Aitchison 1986). Reduces skewness compositional bias. Requires positive values; pseudocounts can added. transformation defined : $$alr = [\\log(x_1 / x_D), ..., \\log(x_{D-1} / x_D)]$$ denominator sample \\(x_D\\) can chosen arbitrarily. \"clr\": Centered log ratio (CLR) transformation (Aitchison 1986). Common microbial ecology (Gloor et al. 2017). supports positive data; pseudocounts can used handle zeros. transformation defined : $$clr = \\log(x / g(x)) = \\log x - \\log g(x)$$ \\(x\\) single value, \\(g(x)\\) geometric mean \\(x\\). \"rclr\": Robust CLR transformation. Unlike CLR, method allows zeros without requiring pseudocounts. divides values geometric mean observed (non-zero) features, preserving zeros (Martino et al. 2019). transformation defined : $$rclr = \\log(x / g(x > 0))$$ \\(x\\) single value, \\(g(x > 0)\\) geometric mean sample-wide values \\(x\\) positive (\\(x > 0\\)). Standardization, contrasted transformation, means entries transformed relative entries. methods default margin. margin=1 means rows (sites normal data set) margin=2 means columns (species normal data set). Command wisconsin shortcut common Wisconsin double standardization species (margin=2) first standardized maxima (max) sites (margin=1) site totals (tot). standardization methods give nonsense results negative data entries normally occur community data. empty sites species (constant method =  \"range\"), many standardization change NaN. Function decobackstand can used transform standardized data back original. possible standardization may implemented cases possible. round-errors back-transformation exact, wise overwrite original data. zap=TRUE original zeros exact.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Standardize community data matrix — ct_standardize","text":"function adapted decostand function vegan R package, modifications improved handling.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardize community data matrix — ct_standardize","text":"Aitchison, J. Statistical Analysis Compositional Data (1986). London, UK: Chapman & Hall. Anderson, M.J., Ellingsen, K.E. & McArdle, B.H. (2006) Multivariate dispersion measure beta diversity. Ecology Letters 9, 683–693. Egozcue, J.J., Pawlowsky-Glahn, V., Mateu-Figueras, G., Barcel'o-Vidal, C. (2003) Isometric logratio transformations compositional data analysis. Mathematical Geology 35, 279–300. Gloor, G.B., Macklaim, J.M., Pawlowsky-Glahn, V. & Egozcue, J.J. (2017) Microbiome Datasets Compositional: Optional. Frontiers Microbiology 8, 2224. Legendre, P. & Gallagher, E.D. (2001) Ecologically meaningful transformations ordination species data. Oecologia 129, 271–280. Martino, C., Morton, J.T., Marotz, C.., Thompson, L.R., Tripathi, ., Knight, R. & Zengler, K. (2019) novel sparse compositional technique reveals microbial perturbations. mSystems 4, 1. Oksanen, J. (1983) Ordination boreal heath-like vegetation principal component analysis, correspondence analysis multidimensional scaling. Vegetatio 52, 181–189.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_standardize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize community data matrix — ct_standardize","text":"","code":"# Example usage with sample data cam_data <- read.csv(system.file('penessoulou_season1.csv', package = 'ct')) cam_data <- cam_data %>%   ct_to_community(site_column = camera, species_column = species,                   size_column = number, values_fill = 0)  standardized_data <- ct_standardize(data = cam_data[, 2:11], method = \"total\") standardized_data #> # A tibble: 13 × 10 #>    `Syncerus caffer` `Lepus crawshayi` `Erythrocebus patas` #>                <dbl>             <dbl>                <dbl> #>  1            0.981              0                   0.0169 #>  2            0                  0.375               0.5    #>  3            0.430              0                   0.522  #>  4            0.941              0                   0      #>  5            0                  0                   0.0714 #>  6            0.480              0                   0.341  #>  7            0                  0                   1      #>  8            0.247              0                   0.306  #>  9            0                  0                   0      #> 10            0                  0                   0      #> 11            0                  0                   0      #> 12            0                  0                   0      #> 13            0.0240             0                   0.974  #> # ℹ 7 more variables: `Tragelaphus scriptus` <dbl>, #> #   `Chlorocebus aethiops` <dbl>, `Canis adustus` <dbl>, #> #   `Mellivora capensis` <dbl>, `Sylvicapra grimmia` <dbl>, #> #   `Thryonomys swinderianus` <dbl>, `Genetta genetta` <dbl>"},{"path":"https://stangandaho.github.io/ct/reference/ct_summarise_camtrap_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create activity summary statistics — ct_summarise_camtrap_activity","title":"Create activity summary statistics — ct_summarise_camtrap_activity","text":"Calculates summary statistics camera trap activity periods.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_summarise_camtrap_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create activity summary statistics — ct_summarise_camtrap_activity","text":"","code":"ct_summarise_camtrap_activity(   data,   deployment_column,   datetime_column,   threshold = 5,   time_unit = \"days\",   format = NULL )"},{"path":"https://stangandaho.github.io/ct/reference/ct_summarise_camtrap_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create activity summary statistics — ct_summarise_camtrap_activity","text":"data data frame containing datetime column. deployment_column Character. Column name deployment identifiers. datetime_column datetime column. threshold numeric value indicating minimum gap considered break (default 10). time_unit unit threshold. Supported values include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\". format Optional. character string specifying datetime format, passed .POSIXlt.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_summarise_camtrap_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create activity summary statistics — ct_summarise_camtrap_activity","text":"tibble activity summary statistics deployment.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_summarise_camtrap_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create activity summary statistics — ct_summarise_camtrap_activity","text":"","code":"# Get activity summary camtrap_data <- read.csv(ct:::table_files()[1]) %>% dplyr::filter(project == \"Last\")    ct_summarise_camtrap_activity(data = camtrap_data,                                 deployment_column = \"camera\",                                 datetime_column = datetimes,                                 threshold = 15,                                 time_unit = \"days\") #> # A tibble: 11 × 11 #>    camera       n_records first_record        last_record         total_duration #>    <chr>            <int> <dttm>              <dttm>                       <dbl> #>  1 CAMERA 10          724 2024-03-10 20:09:27 2024-05-09 22:43:34          60.1  #>  2 CAMERA 3             8 2024-03-12 00:07:36 2024-04-01 13:09:35          20.5  #>  3 CAMERA 5           202 2024-03-12 02:54:31 2024-05-02 05:33:28          51.1  #>  4 CAMERA 8           113 2024-03-21 03:52:51 2024-05-10 20:07:12          50.7  #>  5 CAMERA 2            14 2024-03-23 12:36:25 2024-04-01 01:22:52           8.53 #>  6 CAMERA 1           264 2024-03-24 08:03:07 2024-04-26 01:00:52          32.7  #>  7 CAMERA 12            3 2024-03-25 09:43:58 2024-03-25 09:43:59           0    #>  8 CAMERA 4            21 2024-03-27 09:33:07 2024-04-05 00:14:29           8.61 #>  9 CAMERA 11            3 2024-04-04 21:58:33 2024-04-04 21:58:33           0    #> 10 CAMERA 3 - …         4 2024-04-27 23:00:05 2024-05-12 23:30:09          15.0  #> 11 CAMERA 1 - …        31 2024-05-05 03:46:58 2024-05-07 00:00:37           1.84 #> # ℹ 6 more variables: active_duration <dbl>, break_duration <dbl>, #> #   activity_rate <dbl>, n_active_periods <int>, avg_break_duration <dbl>, #> #   n_breaks <dbl>"},{"path":"https://stangandaho.github.io/ct/reference/ct_survey_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a survey design for camera trap deployment — ct_survey_design","title":"Create a survey design for camera trap deployment — ct_survey_design","text":"function designs survey deploying camera traps within specified study area. supports various sampling methods, including random, regular, clustered sampling, options minimum distance constraints padding around study area.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_survey_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a survey design for camera trap deployment — ct_survey_design","text":"","code":"ct_survey_design(   study_area,   method = \"random\",   total_site,   total_cluster,   type_in = \"random\",   min_distance = NULL,   distance = NULL,   padding = 10,   nest_padding = 0,   set_seed = NULL,   verbose = TRUE )"},{"path":"https://stangandaho.github.io/ct/reference/ct_survey_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a survey design for camera trap deployment — ct_survey_design","text":"study_area sf polygon representing area survey conducted. method character string specifying sampling method. Options include: \"random\": Randomly distributes camera trap sites within study area. \"regular\": Creates regularly spaced grid sites. \"regular_cluster\": Generates regularly spaced clusters within sites sampled.. \"random_cluster\": Creates randomly clusters within sites sampled. \"mask\":  Uses existing features study_area object define sampling areas, user-defined site allocation. total_site integer specifying number sites sampled per cluster (\"regular_cluster\" \"random_cluster\") total number sites (\"random\" \"regular\" methods). \"mask\" method, can single value (applied features) vector specifying number sites per feature study_area. total_cluster integer defining number clusters (required \"random_cluster\"). type_in character string indicating within-cluster sampling type. Options: \"regular\": Places sites structured grid within cluster feature (\"mask\" method). \"random\": Distributes sites randomly within cluster feature (\"mask\" method). min_distance numeric value specifying minimum allowed distance (meter) sampled sites (applied random methods). distance numeric vector specifying distance (x y spacing meter) grid cells regular sampling methods. single value provided, used dimensions. padding numeric value defining buffer distance exclude areas near edge study area. nest_padding numeric value defining additional buffer applied within cluster mask feature avoid placing sites near edges units. set_seed optional integer setting random seed ensure reproducibility. verbose logical indicating whether display warnings messages (default: TRUE).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_survey_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a survey design for camera trap deployment — ct_survey_design","text":"sf object containing sampled points within study area.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_survey_design.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a survey design for camera trap deployment — ct_survey_design","text":"function ensures study area projected coordinate reference system (CRS) proceeding. geographic CRS detected, error raised.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_survey_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a survey design for camera trap deployment — ct_survey_design","text":"","code":"if (FALSE) library(ggplot2) # Load example dataset data(\"pendjari\")  # Transform study area to a projected coordinate system pendjari_trans <- pendjari %>%   sf::st_transform(crs = \"EPSG:32631\")  # Random sampling method with 15 sites, ensuring a minimum distance of 5000 meters between sites random_sdes <- ct_survey_design(study_area = pendjari_trans, method = \"random\", verbose = TRUE,                                 total_site = 15, min_distance = 5000, padding = 2000,                                 set_seed = 123)  # Regular sampling method using a grid with cell sizes of 4000m x 6000m regular_sdes <- ct_survey_design(study_area = pendjari_trans, method = \"regular\", verbose = TRUE,                                  distance = c(4000, 6000), padding = 2500, set_seed = 123)  # Random-cluster sampling: 8 clusters, each containing 5 sites, ensuring a # minimum site distance of 2000 meters rand_c_sdes <- ct_survey_design(study_area = pendjari_trans,                                 method = \"random_cluster\", verbose = TRUE,                                 total_cluster = 8, total_site = 5,                                 distance = c(7000, 3000), min_distance = 2000,                                 padding = 2000, nest_padding = 500, set_seed = 123) #> Warning: Cluster size doesn't allow to have 5 sites per #>                                 cluster. Try to adjust distance and min_distance  # Random-cluster sampling with regularly distributed sites: 22 clusters, each # with 8 regularly spaced sites rand_c_reg_sdes <- ct_survey_design(study_area = pendjari_trans,                                     method = \"random_cluster\", verbose = TRUE,                                     total_cluster = 22, total_site = 8, type_in = \"regular\",                                     distance = c(6000, 3000),                                     padding = 1000, nest_padding = 0, set_seed = 123)  # Regular-cluster sampling: Grid with 3 sites per cluster, ensuring a minimum # distance of 2000 meters between sites reg_c_sdes <- ct_survey_design(study_area = pendjari_trans,                                method = \"regular_cluster\", verbose = TRUE,                                total_site = 3, distance = c(7000, 6000),                                min_distance = 2000, padding = 2000, set_seed = 123) #> Warning: Cluster size doesn't allow to have 3 sites per cluster. Try to adjust distance and min_distance  # Regular-cluster sampling with regularly distributed sites within clusters reg_c_reg_sdes <- ct_survey_design(study_area = pendjari_trans,                                    method = \"regular_cluster\", verbose = TRUE,                                    total_site = 3, distance = c(7000, 6000), type_in = \"regular\",                                    padding = 1000, set_seed = 123) # A plot with ggplot()+   geom_sf(data = pendjari_trans)+   geom_sf(data = reg_c_reg_sdes)   # Mask-based sampling: Sites are sampled within existing features of the study area mask_sdes <- ct_survey_design(study_area = pendjari_trans,                               method = \"mask\", verbose = TRUE,                               total_site = 13, distance = c(7000, 6000),                               min_distance = 2000, nest_padding = 2000, set_seed = 123) #> Warning: Maximum number of points could not exced 11 with #>                             minimum distance of 2000.  # Mask-based sampling with regularly spaced sites per feature mask_regular_sdes <- ct_survey_design(study_area = pendjari_trans,                                       method = \"mask\", verbose = TRUE, type_in = \"regular\",                                       total_site = c(8, 2, 13), distance = c(7000, 6000),                                       min_distance = 2000, nest_padding = 1000, set_seed = 123)    # \\dontrun{}"},{"path":"https://stangandaho.github.io/ct/reference/ct_temporal_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the temporal shift of one species' activity over two periods — ct_temporal_shift","title":"Calculate the temporal shift of one species' activity over two periods — ct_temporal_shift","text":"function estimates analyzes temporal shift activity species two time periods using kernel density estimation. computes activity distributions determines magnitude direction shift.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_temporal_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the temporal shift of one species' activity over two periods — ct_temporal_shift","text":"","code":"ct_temporal_shift(   first_period,   second_period,   convert_time = FALSE,   xscale = 24,   xcenter = c(\"noon\", \"midnight\"),   n_grid = 128,   kmax = 3,   adjust = 1,   width_at = 1/2,   format = \"%H:%M:%S\",   time_zone,   plot = TRUE,   linestyle_1 = list(),   linestyle_2 = list(),   posestyle_1 = list(),   posestyle_2 = list(),   ... )"},{"path":"https://stangandaho.github.io/ct/reference/ct_temporal_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the temporal shift of one species' activity over two periods — ct_temporal_shift","text":"first_period numeric vector representing activity times radians first period. second_period numeric vector representing activity times radians second period. convert_time Logical. TRUE, converts times radians analysis. xscale numeric value scale x-axis. Default 24 representing time hours. xcenter string indicating center x-axis. Options \"noon\" (default) \"midnight\". n_grid integer specifying number grid points density estimation. Default 128. kmax integer indicating maximum number modes allowed activity pattern. Default 3. adjust numeric value adjust bandwidth kernel density estimation. Default 1. width_at Numeric. fraction maximum density activity width measured (default 0.5). format Character. Format time input (default \"%H:%M:%S\"). Used convert_time = TRUE. time_zone Character. Time zone time conversion. Required convert_time = TRUE. plot Logical. TRUE, generates plot comparing activity distributions two periods. linestyle_1 List. Line style settings first period's density plot. Includes linetype, linewidth, color. linestyle_2 List. Line style settings second period's density plot. Includes linetype, linewidth, color. posestyle_1 List. Marker style settings first period's density range. Includes shape, size, color, alpha. posestyle_2 List. Marker style settings second period's density range. Includes shape, size, color, alpha. ... Additional arguments (currently unused).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_temporal_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the temporal shift of one species' activity over two periods — ct_temporal_shift","text":"list containing: tibble : First period range: start end times active periods first dataset. Second period range: start end times active periods second dataset. Shift size (hour): absolute difference activity duration two periods. Move: categorical description shift (\"Forward\", \"Backward\", \"Expanded\", \"Contracted\", etc.). plot (optional): ggplot2 object visualizing density distributions plot = TRUE.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_temporal_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the temporal shift of one species' activity over two periods — ct_temporal_shift","text":"","code":"library(ggplot2) # Using radians as input  first_period <- c(1.3, 2.3, 2.5, 5.2, 6.1, 2.3)  # Example timestamps for period 1 second_period <- c(1.8, 2.2, 2.5)  # Example timestamps for period 2 result <- ct_temporal_shift(first_period, second_period, plot = TRUE, xcenter = \"noon\",                             linestyle_1 = list(color = \"gray10\", linetype = 1, linewidth = 1),                             linestyle_2 = list(color = \"#b70000\", linetype = 5, linewidth = .5))  result #> [[1]] #> # A tibble: 1 × 4 #>   `First period range` `Second period range` `Shift size (in hour)` Move     #>   <chr>                <chr>                                  <dbl> <chr>    #> 1 06:59:32 - 10:34:58  06:25:31 - 10:12:18                     0.19 Backward #>  #> $plot  #>   # customize the graph associated result result$plot+   labs(color = \"Periods\")+   theme(legend.position = \"top\")   # Using time strings as input first_period <- c(\"12:03:05\", \"13:10:09\", \"14:08:10\", \"14:18:30\", \"18:22:11\") second_period <- c(\"13:00:20\", \"14:20:10\", \"15:55:20\", \"16:03:01\", \"16:47:00\") result <- ct_temporal_shift(first_period, second_period,                             convert_time = TRUE,                             format = \"%H:%M:%S\",                             time_zone = \"UTC\")"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_community.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data to a community matrix — ct_to_community","title":"Convert data to a community matrix — ct_to_community","text":"function transforms input data community matrix rows represent sites, columns represent species, values indicate count abundance species site.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_community.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data to a community matrix — ct_to_community","text":"","code":"ct_to_community(   data,   site_column,   species_column,   size_column,   values_fill = NULL )"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_community.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data to a community matrix — ct_to_community","text":"data data frame containing input data. site_column column data frame representing site identifiers. Can specified string unquoted column name. species_column column data frame representing species identifiers. Can specified string unquoted column name. size_column (Optional) column representing size abundance species site. provided, counts species occurrences calculated. values_fill (Optional) value fill missing cells resulting community matrix. Defaults NULL.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_community.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data to a community matrix — ct_to_community","text":"tibble rows represent sites, columns represent species, values represent count abundance species.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_community.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert data to a community matrix — ct_to_community","text":"function creates site--species matrix suitable ecological analysis. size_column provided, function counts occurrences species per site. size_column provided, values used measure species abundance.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_community.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data to a community matrix — ct_to_community","text":"","code":"# Example data df <- dplyr::tibble(   site = c(\"A\", \"A\", \"B\", \"B\", \"C\"),   species = c(\"sp1\", \"sp2\", \"sp1\", \"sp3\", \"sp2\"),   abundance = c(5, 2, 3, 1, 4) )  # Convert to community matrix with counts ct_to_community(df, site_column = site, species_column = species) #> # A tibble: 3 × 4 #>   site    sp1   sp2   sp3 #>   <chr> <int> <int> <int> #> 1 A         1     1    NA #> 2 B         1    NA     1 #> 3 C        NA     1    NA  # Convert to community matrix with abundance ct_to_community(df, site_column = site, species_column = species, size_column = abundance) #> # A tibble: 3 × 4 #>   site    sp1   sp2   sp3 #>   <chr> <dbl> <dbl> <dbl> #> 1 A         5     2    NA #> 2 B         3    NA     1 #> 3 C        NA     4    NA  # Fill missing cells with 0 ct_to_community(df, site_column = site, species_column = species, values_fill = 0) #> # A tibble: 3 × 4 #>   site    sp1   sp2   sp3 #>   <chr> <int> <int> <int> #> 1 A         1     1     0 #> 2 B         1     0     1 #> 3 C         0     1     0"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_occupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert camera trap data to occupancy format — ct_to_occupancy","title":"Convert camera trap data to occupancy format — ct_to_occupancy","text":"function transforms camera trap detection data occupancy format suitable analysis. aggregates detections user-defined time windows optionally converts counts presence-absence (0/1) data.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_occupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert camera trap data to occupancy format — ct_to_occupancy","text":"","code":"ct_to_occupancy(   data,   date_column,   format = \"%Y-%m-%d\",   site_column,   species_column,   size_column,   by_day = 7,   presence_absence = TRUE )"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_occupancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert camera trap data to occupancy format — ct_to_occupancy","text":"data data frame containing camera trap detection records. date_column name column containing detection dates. format character string. specified converting character representation, try c(\"%Y-%m-%d\", \"%Y/%m/%d\") one one, give error none works. Otherwise, processing via strptime() whose help page describes available conversion specifications. site_column name column identifying sampling sites. species_column name column containing species names. Can NULL species information needed. size_column name column representing detection counts. by_day integer specifying number days per time window (default: 7). presence_absence Logical. TRUE, converts counts presence-absence data (1 = detected, 0 = detected). Default TRUE.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_occupancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert camera trap data to occupancy format — ct_to_occupancy","text":"wide-format data frame rows represent sites (optionally species), columns represent detection windows. Values indicate either detection counts presence-absence (0/1).","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_to_occupancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert camera trap data to occupancy format — ct_to_occupancy","text":"","code":"data <- data.frame(   date = c(\"01-01-2023\", \"03-01-2023\", \"10-01-2023\", \"15-01-2023\"),   site = c(\"A\", \"A\", \"B\", \"B\"),   species = c(\"Tiger\", \"Tiger\", \"Deer\", \"Deer\"),   count = c(1, 2, 3, 1) )  occupancy_data <- ct_to_occupancy(   data,   date_column = date,   site_column = site,   species_column = species,   size_column = count,   by_day = 7,   presence_absence = TRUE )  occupancy_data #> # A tibble: 4 × 732 #>   site  species `1-01-20 to 1-01-26` `1-01-27 to 1-02-02` `1-02-03 to 1-02-09` #>   <chr> <chr>                  <dbl>                <dbl>                <dbl> #> 1 A     Deer                       0                    0                    0 #> 2 A     Tiger                      0                    0                    0 #> 3 B     Deer                       0                    0                    0 #> 4 B     Tiger                      0                    0                    0 #> # ℹ 727 more variables: `1-02-10 to 1-02-16` <dbl>, `1-02-17 to 1-02-23` <dbl>, #> #   `1-02-24 to 1-03-02` <dbl>, `1-03-03 to 1-03-09` <dbl>, #> #   `1-03-10 to 1-03-16` <dbl>, `1-03-17 to 1-03-23` <dbl>, #> #   `1-03-24 to 1-03-30` <dbl>, `1-03-31 to 1-04-06` <dbl>, #> #   `1-04-07 to 1-04-13` <dbl>, `1-04-14 to 1-04-20` <dbl>, #> #   `1-04-21 to 1-04-27` <dbl>, `1-04-28 to 1-05-04` <dbl>, #> #   `1-05-05 to 1-05-11` <dbl>, `1-05-12 to 1-05-18` <dbl>, …"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_radian.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time to radians — ct_to_radian","title":"Convert time to radians — ct_to_radian","text":"function converts time values radians, often used circular statistics time--day analyses.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_radian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time to radians — ct_to_radian","text":"","code":"ct_to_radian(data, times, format = \"%H:%M:%S\", time_zone = \"UTC\")"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_radian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time to radians — ct_to_radian","text":"data data frame containing column time values. Optional. NULL, times parameter treated standalone vector. times column name data vector time values converted. Time values format recognized .POSIXct(). format string specifying format time values, using standard POSIX formatting syntax. Default \"%H:%M:%S\". time_zone string specifying time zone interpreting time values. Default \"UTC\".","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_radian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert time to radians — ct_to_radian","text":"data provided, function returns input data frame additional column named time_radian. data provided, function returns numeric vector time values converted radians.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_radian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert time to radians — ct_to_radian","text":"function converts time values radians based 24-hour clock: full day (24 hours) corresponds \\(2\\pi\\) radians. fractional time day calculated : $$\\text{Fraction day} = \\frac{\\text{hours}}{24} + \\frac{\\text{minutes}}{1440} + \\frac{\\text{seconds}}{86400}$$ example, time 23 hours, 6 minutes, 12 seconds: $$\\text{Fraction day} = \\frac{23}{24} + \\frac{6}{1440} + \\frac{12}{86400}$$ convert fraction radians: $$\\text{Radians} = \\text{Fraction day} \\times 2\\pi$$","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_radian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert time to radians — ct_to_radian","text":"","code":"if (FALSE) { # \\dontrun{   # Convert a standalone vector of time values   times <- c(\"00:00:00\", \"06:00:00\", \"12:00:00\", \"18:00:00\")   ct_to_radian(times = times, format = \"%H:%M:%S\")    # Convert a column of time values in a data frame   data <- data.frame(times = c(\"00:00:00\", \"06:00:00\", \"12:00:00\", \"18:00:00\"))   ct_to_radian(data = data, times = times, format = \"%H:%M:%S\") } # }"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert radian to time — ct_to_time","title":"Convert radian to time — ct_to_time","text":"function converts angle radians (representing fraction full circle) time format '%H:%M:%S'. conversion assumes radian value represents fraction 24-hour day (.e., 0 radians midnight \\(2\\pi\\) radians next midnight).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert radian to time — ct_to_time","text":"","code":"ct_to_time(radian)"},{"path":"https://stangandaho.github.io/ct/reference/ct_to_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert radian to time — ct_to_time","text":"radian numeric value vector representing angle radians. value must lie within range \\([0, 2\\pi]\\), 0 corresponds midnight (00:00:00) \\(2\\pi\\) corresponds next midnight (24:00:00).","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_to_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert radian to time — ct_to_time","text":"character string representing time format '%H:%M:%S'.","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_to_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert radian to time — ct_to_time","text":"","code":"# Convert 1.6 radians to time ct_to_time(1.6) #> [1] \"06:06:42\" # Output: \"06:06:42\""},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for trap rate estimation — ct_traprate_data","title":"Prepare data for trap rate estimation — ct_traprate_data","text":"Calculates observation counts associated monitoring effort per deployment support trap rate estimation.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for trap rate estimation — ct_traprate_data","text":"","code":"ct_traprate_data(   observation_data,   use_deployment = TRUE,   deployment_data = NULL,   deployment_column,   start_column = NULL,   end_column = NULL,   datetime_column = NULL,   format = NULL,   time_zone = \"\",   time_unit = \"days\" )"},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for trap rate estimation — ct_traprate_data","text":"observation_data data frame detection records (e.g., camera trap images events). use_deployment Logical. TRUE (default), effort derived deployment data. FALSE, effort estimated observation timestamps. deployment_data Optional. data frame deployment metadata; required use_deployment = TRUE. deployment_column column name (unquoted string) uniquely identifies deployment (e.g., camera ID). start_column Optional. Start datetime column deployment data. Required use_deployment = TRUE. end_column Optional. End datetime column deployment data. Required use_deployment = TRUE. datetime_column Optional. datetime column observation_data; used use_deployment = FALSE. format character string specifying format datetime columns. NULL, defaults ISO 8601 format. time_zone time zone used parse datetime values. Default \"\" (.e., system time zone). time_unit Unit time compute effort trap rate. One \"secs\", \"mins\", \"hours\", \"days\", \"weeks\". Default \"days\".","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for trap rate estimation — ct_traprate_data","text":"data frame columns: deployment_column: Deployment identifier n: Number observations per deployment effort: Monitoring duration effort_unit: Time unit used effort","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for trap rate estimation — ct_traprate_data","text":"","code":"data(\"ctdp\") deployments <- ctdp$data$deployments observations <- ctdp$data$observations %>%                   dplyr::filter(scientificName == \"Vulpes vulpes\")  ct_traprate_data(observation_data = observations,                  deployment_data = deployments,                  use_deployment = TRUE,                  deployment_column = deploymentID,                  datetime_column = timestamp,                  start = start, end = 'end'                  ) #> # A tibble: 3 × 4 #>   deploymentID                             n effort effort_unit #>   <chr>                                <int>  <dbl> <chr>       #> 1 0d620d0e-5da8-42e6-bcf2-56c11fb3d08e     3  10.0  days        #> 2 c95a566f-e75e-4e7b-a905-0479c8770da3     2   4.55 days        #> 3 d6d42e25-be43-4820-909d-708e42219a86    10  12.6  days"},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate trap rate — ct_traprate_estimate","title":"Estimate trap rate — ct_traprate_estimate","text":"Computes estimated trap rate uncertainty using bootstrapping, optional support stratified estimation based area-weighted averaging.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate trap rate — ct_traprate_estimate","text":"","code":"ct_traprate_estimate(data, strata = NULL, n_bootstrap = 1000)"},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate trap rate — ct_traprate_estimate","text":"data data frame returned ct_traprate_data() columns n effort. strata Optional. data frame defining strata, columns stratumID area. n_bootstrap Number bootstrap replicates estimate uncertainty. Default 1000.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate trap rate — ct_traprate_estimate","text":"data frame following columns: estimate: Trap rate estimate (e.g., detections per day) se: Standard error estimate cv: Coefficient variation lower_ci: Lower bound 95\\ upper_ci: Upper bound 95\\ n: Number deployments observation used unit: Effort unit","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/reference/ct_traprate_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate trap rate — ct_traprate_estimate","text":"","code":"data(\"ctdp\") deployments <- ctdp$data$deployments observations <- ctdp$data$observations %>%                   dplyr::filter(scientificName == \"Vulpes vulpes\")  trap_rate <- ct_traprate_data(observation_data = observations,                               deployment_data = deployments,                               use_deployment = FALSE,                               deployment_column = deploymentID,                               datetime_column = timestamp,                               start = start, end = 'end' )  ct_traprate_estimate(data = trap_rate, n_bootstrap = 1000) #>            estimate        se        cv  lower_ci upper_ci n   unit #> trap_rate 0.6206041 0.1829947 0.2948655 0.2985075 1.020408 3 n/days"},{"path":"https://stangandaho.github.io/ct/reference/ctdp.html","id":null,"dir":"Reference","previous_headings":"","what":"Camera trap data package example — ctdp","title":"Camera trap data package example — ctdp","text":"Data metadata example study exported Agouti camera trap data management platform camtrap-DP format. Metadata includes study name, authors, location details. Data held element data, list holding dataframes deployments, media observations. See https://tdwg.github.io/camtrap-dp details.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ctdp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Camera trap data package example — ctdp","text":"","code":"ctdp"},{"path":"https://stangandaho.github.io/ct/reference/ctdp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Camera trap data package example — ctdp","text":"list holding study data metadata.","code":""},{"path":"https://stangandaho.github.io/ct/reference/ctdp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Camera trap data package example — ctdp","text":"Marcus Rowcliffe","code":""},{"path":"https://stangandaho.github.io/ct/reference/duikers.html","id":null,"dir":"Reference","previous_headings":"","what":"Maxwell's duiker camera‑trap distance & video‑start data — duikers","title":"Maxwell's duiker camera‑trap distance & video‑start data — duikers","text":"duikers dataset named list three tibbles derived Maxwell's duiker (Philantomba maxwellii) camera‑trap distance‑sampling data collected Taï National Park, Côte d'Ivoire (2014), archived Dryad dataset Distance sampling camera traps (Howe et al., 2018)","code":""},{"path":"https://stangandaho.github.io/ct/reference/duikers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maxwell's duiker camera‑trap distance & video‑start data — duikers","text":"","code":"duikers"},{"path":"https://stangandaho.github.io/ct/reference/duikers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Maxwell's duiker camera‑trap distance & video‑start data — duikers","text":"named list tibbles: DaytimeDistances: tibble Maxwell's‑duiker distance observations (including non-peak periods) recorded camera stations daytime deployments. following columns: distance: midpoint (m) assigned distance interval animal camera. Sample.Label: camera‑station identifier. Effort: number active 2 second time steps camera operated (.e. temporal effort). Region.Label: stratum name (single stratum dataset). Area: study area size (km^2; dataset, 40.4). multiplier: spatial effort: fraction full circle covered, based camera's 42 deg field view (42/360). utm.e: UTM easting (metres) camera station. utm.n: UTM northing (metres) camera station. object: unique identifier observation PeakDistances: tibble column structure DaytimeDistances, includes observations species' peak activity periods (dawn late day records). VideoStartTimesFullDays: tibble camera‑trigger times duiker videos recorded full day deployments (.e. days without researcher visits). Columns include: order: sequential order video events station/day. folder: local folder (e.g. \"A1\") grouping videos station session. vid.: unique video identifier number. ek.: event key number (original trigger event id). easting: UTM easting (metres) video event. northing: UTM northing (metres) video event. month: calendar month (1 12) video event. day: day month (1 31). hour: hour (24h clock) video started. minute: minute hour video started. date: Date record time: Time record datetime: date pasted time","code":""},{"path":"https://stangandaho.github.io/ct/reference/duikers.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maxwell's duiker camera‑trap distance & video‑start data — duikers","text":"Howe, E. J., Buckland, S. T., Després-Einspenner, M. L., Kühl, H. S., & Buckland, S. T. (2018). Data : Distance sampling camera traps. doi:10.5061/dryad.b4c70","code":""},{"path":"https://stangandaho.github.io/ct/reference/lnorm_confint.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-normal confidence interval — lnorm_confint","title":"Log-normal confidence interval — lnorm_confint","text":"Calculates approximate log-normal confidence intervals given estimates standard errors.","code":""},{"path":"https://stangandaho.github.io/ct/reference/lnorm_confint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-normal confidence interval — lnorm_confint","text":"","code":"lnorm_confint(estimate, se, percent = 95)"},{"path":"https://stangandaho.github.io/ct/reference/lnorm_confint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-normal confidence interval — lnorm_confint","text":"estimate Numeric estimate value(s) se Standard error(s) estimate percent Percentage confidence level","code":""},{"path":"https://stangandaho.github.io/ct/reference/lnorm_confint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-normal confidence interval — lnorm_confint","text":"dataframe row per estimate input, columns lcl ucl (lower upper confidence limits).","code":""},{"path":"https://stangandaho.github.io/ct/reference/pendjari.html","id":null,"dir":"Reference","previous_headings":"","what":"Pendjari national park and surrounding areas — pendjari","title":"Pendjari national park and surrounding areas — pendjari","text":"dataset containing spatial boundaries Pendjari National Park surrounding hunting zones Benin.","code":""},{"path":"https://stangandaho.github.io/ct/reference/pendjari.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pendjari national park and surrounding areas — pendjari","text":"","code":"pendjari"},{"path":"https://stangandaho.github.io/ct/reference/pendjari.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pendjari national park and surrounding areas — pendjari","text":"tibble 3 rows 2 columns: NOM: name protected area hunting zone. geometry: spatial geometry area, stored decimal degrees (EPSG:4326).","code":""},{"path":"https://stangandaho.github.io/ct/reference/pendjari.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pendjari national park and surrounding areas — pendjari","text":"","code":"# Load the dataset data(\"pendjari\")  # Plot the data library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE plot(pendjari, main = \"Pendjari National Park and Surrounding Areas\") legend(\"topright\", legend = pendjari$NAME, fill = c(\"gray10\", \"gray50\", \"gray90\"))"},{"path":"https://stangandaho.github.io/ct/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator Pipe operator","code":""},{"path":"https://stangandaho.github.io/ct/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs  lhs %<>% rhs"},{"path":[]},{"path":"https://stangandaho.github.io/ct/news/index.html","id":"id_2025-0-3-0","dir":"Changelog","previous_headings":"","what":"2025-08-09","title":"ct 0.3.0","text":"ct_fit_ds() fitting detection functions estimating density/abundance. ct_availability() temporal availability corrections. ct_QAIC(), ct_chi2_select(), ct_select_model() automated two-stage model selection. ct_dp_read() load Camtrap DP datasets local files URLs. ct_dp_table() access specific tables (observations, deployments, media, events, taxa). ct_dp_example() load example dataset. ct_dp_version() retrieve dataset standard version. ct_dp_filter() subset tables using dplyr-style filtering.","code":""},{"path":[]},{"path":"https://stangandaho.github.io/ct/news/index.html","id":"id_2025-0-2-0","dir":"Changelog","previous_headings":"","what":"2025-07-29","title":"ct 0.2.0","text":"Improved ct_stack_df() - C++ implementation stacking list data frames.","code":""},{"path":"https://stangandaho.github.io/ct/news/index.html","id":"id_2025-0-2-0-1","dir":"Changelog","previous_headings":"","what":"2025-07-10","title":"ct 0.2.0","text":"Added new functions support trap rate REM-based density estimation workflows: ct_traprate_estimate() estimates trap rates detection data; ct_fit_activity() models diel activity patterns; ct_fit_speedmodel() fits animal movement speed models; ct_fit_detmodel() estimates detection probability functions; ct_fit_rem() applies Random Encounter Model (REM) estimate animal density; ct_get_effort() calculates sampling effort metrics camera-days; ct_traprate_data() prepares detection effort data analysis.","code":""},{"path":"https://stangandaho.github.io/ct/news/index.html","id":"id_2025-0-2-0-2","dir":"Changelog","previous_headings":"","what":"2025-06-26","title":"ct 0.2.0","text":"ct_correct_datetime() correct datetime stamps camera trap datasets using deployment-specific correction table. Supports multiple datetime formats, offset directions.","code":""},{"path":"https://stangandaho.github.io/ct/news/index.html","id":"id_2025-0-2-0-3","dir":"Changelog","previous_headings":"","what":"2025-06-25","title":"ct 0.2.0","text":"ct_plot_camtrap_activity() function visualize camera trap deployment activity optional gap indicators. ct_summarise_camtrap_activity() function compute summary statistics camera trap deployment activity, including active durations, gaps, activity rates, etc.","code":""},{"path":"https://stangandaho.github.io/ct/news/index.html","id":"id_2025-0-2-0-4","dir":"Changelog","previous_headings":"","what":"2025-06-24","title":"ct 0.2.0","text":"Improved handling non-numeric variables ct_describe_df(). Added support detecting sampling breaks using ct_find_break(). Added function compute confidence intervals (ct_ci() ct_lognorm_ci()) Fixed NSE-related warnings","code":""}]
